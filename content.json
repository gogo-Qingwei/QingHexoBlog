{"meta":{"title":"Qing's Journey","subtitle":null,"description":"Coding & Modeling","author":"Qing Wei","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2018-02-03T20:06:44.000Z","updated":"2018-02-04T19:49:56.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Profile 这是一个半路出家的码农的博客。 因为还没学会算法，数据结构，还有各种模式设计，又恰好被录取过数学系，所以现在是个数据工程师。"},{"title":"","date":"2018-02-05T00:49:30.358Z","updated":"2018-02-04T21:58:18.000Z","comments":true,"path":"css/d3jstomarkdown.css","permalink":"http://yoursite.com/css/d3jstomarkdown.css","excerpt":"","text":"div.example { font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; } .box { font: 10px sans-serif; } .box line, .box rect, .box circle { fill: #fff; stroke: #000; stroke-width: 1.5px; } .box .center { stroke-dasharray: 3,3; } .box .outlier { fill: none; stroke: #ccc; } var margin = {top: 10, right: 50, bottom: 20, left: 50}, width = 120 - margin.left - margin.right, height = 500 - margin.top - margin.bottom; var min = Infinity, max = -Infinity; var chart = d3.box() .whiskers(iqr(1.5)) .width(width) .height(height); d3.csv(\"/morley.csv\", function(error, csv) { var data = []; csv.forEach(function(x) { var e = Math.floor(x.Expt - 1), r = Math.floor(x.Run - 1), s = Math.floor(x.Speed), d = data[e]; if (!d) d = data[e] = [s]; else d.push(s); if (s > max) max = s; if (s < min) min = s; }); chart.domain([min, max]); var svg = d3.select(\"div#example\").selectAll(\"svg\") .data(data) .enter().append(\"svg\") .attr(\"class\", \"box\") .attr(\"width\", width + margin.left + margin.right) .attr(\"height\", height + margin.bottom + margin.top) .append(\"g\") .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\") .call(chart); setInterval(function() { svg.datum(randomize).call(chart.duration(1000)); }, 2000); }); function randomize(d) { if (!d.randomizer) d.randomizer = randomizer(d); return d.map(d.randomizer); } function randomizer(d) { var k = d3.max(d) * .02; return function(d) { return Math.max(min, Math.min(max, d + k * (Math.random() - .5))); }; } // Returns a function to compute the interquartile range. function iqr(k) { return function(d, i) { var q1 = d.quartiles[0], q3 = d.quartiles[2], iqr = (q3 - q1) * k, i = -1, j = d.length; while (d[++i] < q1 - iqr); while (d[--j] > q3 + iqr); return [i, j]; }; }"},{"title":"Categories","date":"2018-02-03T20:15:40.000Z","updated":"2018-02-04T02:22:08.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-02-03T20:05:41.000Z","updated":"2018-02-04T02:18:44.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"The Zen of Python by Time Peters","slug":"02112018-1336","date":"2018-02-11T18:36:45.000Z","updated":"2018-02-24T23:31:11.875Z","comments":true,"path":"2018/02/11/02112018-1336/","link":"","permalink":"http://yoursite.com/2018/02/11/02112018-1336/","excerpt":"","text":"Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren’t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one– and preferably only one –obvious way to do it.Although that way may not be obvious at first unless you’re Dutch.Now is better than never.Although never is often better than right now.If the implementation is hard to explain, it’s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea – let’s do more of those! Reference:The Hitchhiker’s Guide to Python","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"给博客换模板 - From Jekyll To Hexo","slug":"02012018-2301","date":"2018-02-02T04:01:25.000Z","updated":"2018-02-25T02:38:32.587Z","comments":true,"path":"2018/02/01/02012018-2301/","link":"","permalink":"http://yoursite.com/2018/02/01/02012018-2301/","excerpt":"","text":"契机使用Jekyll模板已经两年了，期间修修改改，已经完全看不出其中的结构，完全不想再碰。正好看中了更顺眼的Hexo Theme，干脆来个一次性大换血，也顺便整理一下这几年来的总结。 Jekyll已经乱成了这样，大量的文件被放在总目录下，杂乱无章： builderqing.github.io-directory-tree/ ├── ._config.yml ├── _data ├── _includes ├── _layouts ├── _sass ├── _templates ├── dataset ├── gallery ├── image └── project 新建的Hexo使用了hiker theme，好看又好用： builderqing.github.io-directory-tree/ ├── ._config.yml ├── public ├── scaffolds ├── source └── themes 如何解决代码块中出现垂直代码块(vertical scroll bar)的方法模板中如果使用 ``` 来引用code块， 有点不好看。 我改了一下css文件， 步骤如下： 打开文件themes/hiker/source/css/_partial/highlight.styl 找到代码块，并做以下的修改 使用``` 来高亮代码块 1234567891011121314$code-block background: $highlight-background margin: article-padding article-padding * 0 padding: 15px article-padding border-style: solid border-color: color-border border-width: 1px 0 /*change*/ overflow: auto overflow-y: hidden; /*end change*/ color: $highlight-foreground font-size: 0.9em; line-height: 1em","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Jekyll","slug":"Jekyll","permalink":"http://yoursite.com/tags/Jekyll/"}]},{"title":"Basic SQL and Advanced SQL Notes","slug":"02052018-1745","date":"2017-01-02T20:00:00.000Z","updated":"2018-02-25T04:05:20.054Z","comments":true,"path":"2017/01/02/02052018-1745/","link":"","permalink":"http://yoursite.com/2017/01/02/02052018-1745/","excerpt":"","text":"SQL SyntaxDATABASE: Database is a collection of data stored in some organized fashion.DATABASE MANAGEMENT SYSTEM(DBMS): Database software, we manipulate data via DBMS.TABLE: Table is a structured file that store data for a specific type. The table name is always unique - meaning no other table in that database can have the same name.SCHEMA: Information about database and table layout and properties.COLUMN: Tables are made up of columns. Each column in a database has an associated data type.DATA TYPE: a type of allowed data. Data types restrict the type of data that can be stored in a column.ROW: Data in a table is stored in rows.PRIMARY KEY: A column(or columns) whose values uniquely identify every row in a table. No null values Select Rows How to use the SQL SELECT statement to retrieve a single table columns? Multiple SQL statements must be separated by semicolons SQL statements are case-insensitive, while the names of tables, columns and values are not. All extra white space within a SQL Statement is ignored when that statement is processed. 12345678910111213141516171819202122232425--select one column Select column_nameFrom Products;--Select multiple columns Select column_name1,column_name2,column_name3From Products;--Select all columns SELECT *FROM Products;--Select distinct rows SELECT DISTINCT column_nameFROM Products;--Select limit results SELECT column1,column2,...FROM table LIMIT offset , count;Select column_nameFrom ProductswhereLimit 5 offset 5; Order By Rows ORDER BY clause is the last clause in your SELECT statement. (put it at the end) ASC = Ascending order(default), DESC=Descending order Using FIELD() function to define your own custom sort order, not ASC or DESC 1234567891011121314151617181920212223242526272829303132--Sorting data Select column_nameFrom ProductsOrder by column_name--Sorting by multiple columns Select column_name1,column_name2,column_name3From ProductsOrder by column_name2,column_name3ORSelect column_name1,column_name2,column_name3From ProductsOrder by 2,3--Sorting different direction Select column_name1,column_name2,column_name3From ProductsOrder by 2 DESC, 3 ASC;--Sorting by custom order select orderNumber,statusFrom ordersorder by FIELD(status, 'In Process','On Hold','Cancelled','Resolved','Disputed','Shipped');SELECT CONCAT(prefix, suffix)FROM itemsORDER BY prefix, suffix; Search Rows If we want to extract subset of the table’s data as needed for specific operations or reports. WHERE is used not only with the SELECT but also DELETE and UPDATE 123456789101112131415161718192021222324252627282930313233--Select special items SELECT column_name1,column_name2 FROM ProductsWHERE column_name1 = number;--Check for no value SELECT column_name FROM CustomersWHERE column _name IS NULL;------= : Equal &lt;&gt; : Not equal. Note: In some versions of SQL this operator may be written as != &gt; : Greater than &lt; : Less than &gt;= : Greater than or equal &lt;= : Less than or equal BETWEEN : Between an inclusive range (range) SELECT * FROM employee_tbl WHERE daily_typing_pages BETWEEN 170 AND 300; LIKE : Search for a pattern LIKE '%$_20%' ESCAPE '$'--orLIKE '%\\$_20%' TO escape characterIN : To specify multiple possible values for a column SELECT firstname, city, stateFROM customersWHERE state IN ('Arizona', 'Washington', 'Oklahoma', 'Colorado', 'Hawaii');IS NULL: To test whether a value is NULL or not Boolean Operation If we want to extract subset of the table’s data as needed for specific operations or reports. The single quotes are used to delimit a string. The IN operator is the same as OR IN takes a comma-delimited list of valid values, all enclosed within parentheses 12345678910111213141516171819202122232425262728293031--Using the AND(RANK HIGHER) SELECT column_name1,column_name2FROM ProductsWHERE column_name1 = number1 AND column_name2 = number2;--Using the OR SELECT column_name1,column_name2FROM ProductsWHERE column_name1 = number1 OR column_name2 = number2;--Using the IN --Far cleaner and easier to read --Easier to manage --Can contain another SELECTSELECT column_name1,column_name2FROM ProductsWHERE column_name1 IN (val1,val2) --Using the NOT --Used before the column to filter on SELECT column_name1,column_name2FROM ProductsWHERE column_name1 NOT IN (val1,val2)--Using the Exist SELECT employeenumber, firstname, lastname, extensionFROM employeesWHERE exists(SELECT 1FROM officesWHERE city = 'San Francisco' and offices.officeCode = employees.officeCode); Like and Wildcard Rows How to create search pattern to compare against your data? % represents zero, one, or more characters at the specified location in the search pattern. don’t overuse wildcats for processing takes long time 12345678910111213141516171819202122232425262728293031323334--Percent sign(%) --Match any number of occurrences of any character--accept any characters after the word 'Fish'SELECT column_nameFROM ProductsWHERE column_nameLIKE 'Fish%'--accept any characters before or after the word 'Fish'SELECT column_nameFROM ProductsWHERE column_nameLIKE '%Fish%' --accept any products that begin with F and end with a iSELECT column_nameFROM ProductsWHERE column_nameLIKE 'F%i' --Underscore(_) --a single character matchingSELECT column_nameFROM CustomersWHERE column _name LIKE '_ inch'--Brackets([])--specify a set of characters --start with J or MSELECT column_nameFROM CustomersWHERE column_name LIKE '[JM]%'ORDER BY column_name Aliases and Concat columns Aliases can be used when you create a calculated field, renaming a column if the real table column name contains illegal characters, or changing the ambiguous name. 123456789101112131415161718192021--Concatenate --Joining values together to form a single long value. Join column and column SELECT concat(vend_name, ' (' , vend_country ,')')FROM VendorsORDER BY vend_name;--Trim the padding space --RTRIM() trims all space from the right of a value--LTRIM() trim all the left side of a string--TRIM() trims both the right and left--AliasSELECT column_name AS aliasesFROM CustomersWHERE column_name IS NULL;--SQL Mathematical operators + ：addition- ： Subtraction* ： Multiplication/ ：Division Mathematic Functions Very few functions are supported identically by all major DBMSs. We can functions in other parts of the SELECT statement, as well as in other SQL statements. More Text Manipulation detailsMore Numerical Manipulation details 1234567891011121314--Text manipulation functions --convert text to upper caseSELECT column_name1, UPPER(column_name2)--SOUNDEX takes into account similar sounding characters and syllables, enabling strings to be compared by how they sound rather than how they have been typed.SELECT column_name1,column_name2FROM CustomersWHERE SOUNDEX(column_name1) = soundex('name')--Date and time manipulation functions --in MySQL and MariaDB Numeric manipulation functions SELECT order_numFROM OrdersWHERE year(order_date) = 2012 Aggregate Functions These functions enable you to perform all the types of retrieval just enumerated All ignore NULL values More Aggregate details Group By and Having You can perform aggregate calculations on each group. GROUP BY clause must come after any WHERE clause and before any ORDER BY clause WHERE filters rows and HAVING filters groups. 123456789101112131415161718SELECT c1, c2,..., cn, aggregate_function(ci)FROM tableWHERE where_conditionsGROUP BY c1 , c2,...,cn;--HAVING &amp; WHERE --HAVING is very similar to WHERE. The only difference is that WHERE filters rows and HAVING filters groups.SELECT vend_id, COUNT(*) AS num_prodsFROM ProductsWHERE prod_price &gt;= 4GROUP BY vend_idHAVING COUNT(*) &gt;= 2;--ORDER BY &amp; GROUP BY --As a rule, anytime you use a GROUP BY clause, you should also specify an ORDER --BY clause. That is the only way to ensure that data will be sorted properly. Never rely --on GROUP BY to sort your data. Subqueries Subqueries are queries that are embedded into other queries. Subqueries is nested inside another query such as SELECT, INSERT, UPDATE, DELETE. 1234567--Subqueries SELECT cust_name, cust_state,(SELECT COUNT(*)FROM OrdersWHERE Orders.cust_id = Customers.cust_id) AS ordersFROM CustomersORDER BY cust_name; Join If we want to retrieve data in multiple tables with a single SELECT statement, Use JOIN A well-designed database or application is said to scale well. JOIN clause is not a physical entity, and is created by the DBMS as needed. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253--Creating a join --inner joinSELECT vend_name, prod_name, prod_priceFROM Vendors,ProductsWHERE Vendors.vend_id = Products.vend_id --Cartesian product The results returned by a table relationship without a join condition. --The number of rows retrieved will be the number of rows in the first table multiplied by --the number of rows in the second table. Sometimes you’ll hear the type of join that --returns a Cartesian Product referred to as a cross join.--inner joinSELECT column_name(s) FROM table1INNER JOIN table2ON table1.column_name=table2.column_name;--or SELECT column_name(s)FROM table1JOIN table2ON table1.column_name=table2.column_name;--left joinSELECT column_name(s) FROM table1LEFT JOIN table2ON table1.column_name=table2.column_name;--orSELECT column_name(s)FROM table1LEFT OUTER JOIN table2ON table1.column_name=table2.column_name;--right joinSELECT column_name(s) FROM table1RIGHT JOIN table2ON table1.column_name=table2.column_name;--orSELECT column_name(s)FROM table1RIGHT OUTER JOIN table2ON table1.column_name=table2.column_name;--full outer join--NOT SUPPORT IN MYSQL --self joinSELECT a.column_name, b.column_name... FROM table1 a, table1 bWHERE a.common_field = b.common_field;--cross joinSELECT *FROM T1CROSS JOIN T2; Union or Intersect The combined queries are usually known as unions or compound queries. The INTERSECT operator is a set operator that returns only distinct rows of two queries. 123456789101112131415161718192021222324252627282930--Using UNION SELECT cust_name, cust_contact, cust_emailFROM CustomersWHERE cust_state IN ('IL','IN','MI')UNIONSELECT cust_name, cust_contact, cust_emailFROM CustomersWHERE CUST_NAME = 'fUN4All';--Equal to SELECT cust_name, cust_contact, cust_emailFROM CustomersWHERE cust_state IN ('IL','IN','MI') OR CUST_NAME = 'fUN4All';--Using UNION ALL --Don't eliminate duplicates SELECT City FROM CustomersUNION ALLSELECT City FROM SuppliersORDER BY City;--Using Intersect --The order and the number of columns must be the same.--The data types of the corresponding columns must be compatible.--Intersect = DISTINCT + INNER JOIN--INTERSECT=DISTINCT + IN(SELECT column_list FROM table_1)INTERSECT(SELECT column_listFROM table_2); Insert or Update or Delete Rows12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364--Inserting a single complete row insert into \"tablename\"INSERT INTO \"tablename\" (first_column,...last_column)VALUES (first_value,...last_value);--Inserting a single partial row INSERT INTO Customers (CustomerName, City, Country)VALUES ('Cardinal', 'Stavanger', 'Norway');--Insert + Select SELECT *FROM tasks;CREATE TABLE tasks_1 like tasks;INSERT INTO tasks_1SELECT *FROM tasks;--Update a column UPDATE [LOW_PRIORITY] [IGNORE] table_name SET column_name1 = expr1, column_name2 = expr2, ...WHERE condition;--Using UPDATE with INNER JOIN|LEFT JOIN UPDATE employeesLEFT JOINmerits ON employees.performance = merits.performance SET salary = salary + salary * 0.015WHEREmerits.percentage IS NULL;--Delete a row DELETE FROM table [WHERE conditions] [ORDER BY ...] [LIMIT rows] DELETE FROM \"tablename\"WHERE \"columnname\" OPERATOR \"value\" [and|or \"column\" OPERATOR \"value\"];--Delete data from multiple tables DELETE FROM table_1, table_2,...USING table-refs[WHERE conditions] --Using DELETE with INNER JOIN|LEFT JOIN, just change employees. --you can delete records associated with officeCode 5 from both offices and employees tablesDELETE offices, employees FROM officesINNER JOIN employees ON employees.officeCode = employees.officeCodeWHERE offices.officeCode = 5//Now, DELETE T1FROM T1 LEFT JOIN T2 ON T1.key = T2.key WHERE T2.key IS NULL Alter or Create or Drop Table123456789101112131415161718192021222324252627282930313233343536CREATE TABLE tableName [LIKE] anothertableName CREATE TABLE customers_archive LIKE customers;--orINSERT INTO customers_archiveSELECT * FROM customers--Drop a table--The drop table command is used to delete a table and all rows in the table. drop table \"tablename\"--DELETE &amp; DROP--Deleting all of the records in the table leaves the table including column and constraint information. --Dropping the table removes the table definition as well as all of its rows.--Alter--Alter is very useful when you want to change a name of your table, any table field or if you want to add or --delete an existing column in table ALTER TABLE testalter_tbl DROP i;ALTER TABLE testalter_tbl ADD i INT FIRST;ALTER TABLE testalter_tbl MODIFY c CHAR(10);ALTER TABLE table_nameCHANGE old_column_name new_column_name new_column_definition;ALTER TABLE table_nameADD COLUMN columnName type AFTER othercolumnNameALTER TABLE table_nameADD FOREIGN KEY columnName REFERENCES table(columnName)ALTER TABLE table_nameDROP CONSTRAINT constraint_name;ALTER TABLE table_nameDROP FOREIGN KEY column_nameALTER TABLE tableNameADD PRIMARY KEY(columnName) Create Constraints for Table An index can be created in a table to find data more quickly and efficiently. Efficiently checking in a middle size 123--Create constraint 1 CREATE UNIQUE INDEX index_nameON table_name (column_name) Truncate TableIt perform the same function as a DELETE without a WHEREIf you are using InnoDB tables, MySQL will check if there are any foreign key constraints available in the tables before deleting data. The following are cases: If the table has any foreign key constraints, the TRUNCATE TABLE statement deletes rows one by one. If the foreign key constraint has DELETE CASCADE action, the corresponding rows in the child tables are also deleted. If the foreign key constraint does not specify the DELETE CASCADE action, the TRUNCATE TABLE deletes rows one by one, and it will stop and issue an error when it encounters a row that is referenced by a row in a child table. If the table does not have any foreign key constraint, the TRUNCATE TABLEstatement drops the table and recreates a new empty one with the same structure, which is faster and more efficient than using the DELETE statement especially for big tables. If you are using other storage engines, the TRUNCATE TABLE statement just drops and recreates a new table.Notice that the TRUNCATE TABLE statement resets auto increment value to zero if the table has an AUTO_INCREMENT column. In addition, the TRUNCATE TABLE statement does not use the DELETE statement, therefore, the DELETE triggers associated with the table will not be invoked. 12345678910--Truncate table TRUNCATE TABLE [database_name.] [schema_name.] table_name [ WITH ( PARTITIONS ( partition_number | partition_number TO partition_number ) ] --TRUNCATE &amp; DELETE--The difference between this two is that DELETE can roll back if you choose, but TRUNCATE will notTRUNCATE TABLE tableName;--orDELETE FROM tableName; Replace Table If the new row already exist, the REPLACE statement deletes the old row first and then inserts a new row. In some cases, the REPLACE statement updates the existing row only. The Replace statement first inserts the new row into the cities table with the information provided by the column list. The insertion fails because the row with id 2 already exists in the cities table, therefore, MySQL raises a duplicate-key error. The Replace statement then updates the row that has the key specified in the value of the id column. In the normal process, it would delete the old row with conflict id first and then inserts a new row. 123456789101112131415161718REPLACE INTO cities(id,population)VALUES(2,3696820);REPLACE INTO table_name(column_list)VALUES(value_list);INSERT INTO table_name(column_list)VALUES(value_list);--replace and updateREPLACE INTO tableSET columnREPLACE INTO cititesSET id = 4, name = 'Phoenix', population = 1768980;--raise errorUPDATE cititesSET id = 4, name = 'Phoenix', population = 1768980; ADVANCE - MySQL Transactions​ Properties of Transactions Atomicity: ensure all operations within the work unit are completed. Consistency: ensure the database properly changes states Isolation: ensure transactions to operate independently and transparent to each other Durability: ensure the result persists in case of a system failure commit and rollback (for different databases): Commit command should be issued if the transaction is completed(need commit to update) If a failure occurs, a rollback command should be issued to return in the transaction to its previous state.(if any operation within the transaction fails, the entire transaction will fail. For atomicity) There are some statements cannot use within a transaction. 123456CREATE / ALTER / DROP DATABASECREATE / ALTER / DROP / RENAME / TRUNCATE TABLECREATE / DROP INDEXCREATE / DROP EVENTCREATE / DROP FUNCTIONCREATE / DROP PROCEDURE ADVANCE - Prepared Statement make your queries execute faster and more secure. PREPARE-&gt;EXECUTE-&gt;DEALLOCATE PREPARE Use the prepare statement to prepare a statement for execution. Question mark is a placeholder for the productCode. #prepared statement http://www.mysqltutorial.org/mysql-prepared-statement.aspx Declare a produceCode variable and set it values to ‘S10_1678’ Use DEALLOCATE PREPARE to release PREPARE statement. 123456PREPARE stmt1 from 'SELECT productCode, productNameFROM productsWHERE productCode=?';SET @pc='S10_1678';EXECUTE stmt1 USING @pc;DEALLOCATE PREPARE stmt1; ADVANCE - triggersA set of SQL statements stored in the database catalog. And is executed whenever an event associated with a table occurs. (a special type of stored procedure). The main difference between a trigger and a stored procedure is that a trigger is called automatically when a data modification event is made whereas a store procedure must be called explicitly.Advantages • SQL triggers provide an alternative way to check the integrity of data. • SQL triggers can catch errors in business logic in the database layer. • SQL triggers provide an alternative way to run scheduled tasks. By using SQL triggers, you don’t have to wait to run the scheduled tasks because the triggers are invoked automatically before or after a change is made to the data in the tables. • SQL triggers are very useful to audit the changes of data in tables.Disadvantages • SQL triggers only can provide an extended validation and they cannot replace all the validations. Some simple validations have to be done in the application layer. For example, you can validate user’s inputs in the client side by using JavaScript or in the server side using server-side scripting languages such as JSP, PHP, ASP.NET, Perl, etc. • SQL triggers are invoked and executed invisible from the client applications, therefore, it is difficult to figure out what happen in the database layer. • SQL triggers may increase the overhead of the database server. Important words in SQL triggers:BEFORE INSERT – activated before data is inserted into the table.AFTER INSERT – activated after data is inserted into the table.BEFORE UPDATE – activated before data in the table is updated.AFTER UPDATE – activated after data in the table is updated.BEFORE DELETE – activated before data is removed from the table.AFTER DELETE – activated after data is removed from the table. Triggers storage:MySQL stores triggers in a data directory e.g., /data/classicmodels/ with the files named tablename.TRG and triggername.TRN :The tablename.TRG file maps the trigger to the corresponding table.the triggername.TRN file contains the trigger definition.LIMITATIONS(CANNOT DO):• Use SHOW, LOAD DATA, LOAD TABLE, BACKUP DATABASE, RESTORE, FLUSH and RETURN statements.• Use statements that commit or rollback implicitly or explicitly such as COMMIT , ROLLBACK , START TRANSACTION , LOCK/UNLOCK TABLES , ALTER , CREATE , DROP , RENAME , etc.• Use prepared statements such as PREPARE, EXECUTE, etc.• Use dynamic SQL statements. Syntax:CREATE TRIGGER trigger_nametrigger_time trigger_eventON table_nameFOR EACH ROWBEGIN…END;Drop triggers:DROP TIGGER table_name.trigger_name; Views table like Excel, It is a logic table, which contains no value but have table structure, you can query data against it.​ Database system stores database views as a SQL SELECT statement with joins. When the data of the tables changes, the view reflects that changes. View is in SHOW TABLES results. Use SHOW FULL TABLE Advantages Syntax: ALLOW you to simplify complex queries. You can hide complexity of underlying tables to the end-users CREATE Helps limit data access to specific users. To expose non-sensitive data to specific group of users. [ALGORITHM = {MERGE | TEMPTABLE | UNDEFINED}] Provides extra security layer. Can create read-only view VIEW [database_name].[view_name] Enables computed columns AS Enable backward compatibility. [SELECT statement] Disadvantages Querying data from a database view can be slow, especially the view is created based on other views Tables dependency: you create a view based on underlying tables Stored Procedures tableA stored procedure can be invoked by triggers.Major Diff: A Function can be used in the SQL Queries while a procedure cannot be used in SQL queries Advantages• Increase the performance of the applications. Stored procedures are compiled and stored in the database. If an application uses a stored procedure multiple times in a single connection, the compiled version is used, or the stored procedure works like a query.• Help reduce the traffic between application and database server.• Can reusable and transparent to any application.• Are secure. The database administrator can grant appropriate permissions to applications that access stored procedures Disadvantages• If you use a lot of stored procedures, the memory usage of every connection will increase substantially• constructs of stored procedures make it more difficult to develop stored procedures• Difficult to debug stored procedures• Not easy to develop and maintain stored procedures. Examples:Create procedure – stored procedure delimiter // – not related to the sp syntax. change the ; to //, we avoid mysql tool interpret – at a time and pass the sp to the server as a whole. // at the end indicates the end – of the stored procedure. create procedure GetAllProducts() – name of procedure is GetAllProducts begin – begin and end is the body of the stored procedure select * from products; end// delimiter ;Call procedure CALL STORED_PROCEDURE_NAME();Declare variable DECLARE variable_name datatype(size) DEFAULT default_value;Parameters IN[DEFAULT]/ OUT/ INOUT DEFINE A PARAMETER: MODE param_name param_type(param_size) Some Important MySQL FunctionSource:FIELDCAST like str()/int(): convert a value of any type into a value(BINARY, CHAR, DATE, DATETIME, TIME, DECIMAL, SIGNED, UNSIGNED)IFNULL() : IFNULL(expression_1,expression_2); The IFNULL function returns expression_1 if expression_1 is not NULL ; otherwise, it returns expression_2.RAND():generates a random value for each row in the table.select *from employeeswhere jobtitle = ‘Sales Rep’ORDER BY RAND()LIMIT 1;NOW()/ CURDATE()/CURTIME()DATE_ADD(date, interval number type)GROUP_CONCAT():If you do not specify a separator, the GROUP_CONCAT function uses a comma (,) as the default separator.SELECT GROUP_CONCAT(DISTINCT v ORDER BY v ASC SEPARATOR ‘;’)FROM t;SELECT user();SELECT SESSION_USER();SELECT system_user();SELECT VERSION(); References: SQL Practice Problems Sams Teach Yourself SQL in 10 Minutes","categories":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"}]},{"title":"Robust and Optimal Stochastic Resource Allocation on Transportation Networks Subject to Disruptive Events","slug":"03012016-1651","date":"2016-03-01T21:51:37.000Z","updated":"2018-02-11T18:34:19.352Z","comments":true,"path":"2016/03/01/03012016-1651/","link":"","permalink":"http://yoursite.com/2016/03/01/03012016-1651/","excerpt":"","text":"The models I built for solving resource allocation problem on transportation networks. Different size of directed graphs have been considered, and comparison between models have been made. Python Gurobi is used to realize the optimization process. Resource allocation is the assignment of available resources to various uses, which is closely related to the network interdiction problem depends on our objects. The network interdiction problem ask to find a special number of edges whose removal from the network minimizes the maximum flow. Various examples could be found in areas such as military planning, hospital infection control or poison food interdiction. Our goals in such examples are the same: to determine the worst-case scenario, after the realization of uncertainty. contentf af afajkhdfjk Imagine that there are refineries that process several million barrels of crude oil every day, and pipelines are used to transport crude oil to consumption centers. There are intermediate pump stations in long distance networks to keep the crude oil moving smoothly. However, pump stations and pipelines may be out of service. Hence, it is important to manage the oil transportation system in such a way that it is capable of coping with such situations and to reduce the amount of storage of crude oil at consumption centers as much as possible. The bold red lines in the above graphs are the critical edges that determines the maximum flow, assuming the realization of uncertainty. QINGQINGJOURNAL ‘S ```","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Optimization","slug":"Optimization","permalink":"http://yoursite.com/tags/Optimization/"},{"name":"Maximum Flow","slug":"Maximum-Flow","permalink":"http://yoursite.com/tags/Maximum-Flow/"}]}]}