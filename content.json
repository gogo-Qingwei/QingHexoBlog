{"meta":{"title":"Qing's Journey","subtitle":null,"description":"Coding & Modeling","author":"Qing Wei","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2018-02-03T20:06:44.000Z","updated":"2018-02-04T19:49:56.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Profile 这是一个半路出家的码农的博客。 因为还没学会算法，数据结构，还有各种模式设计，又恰好被录取过数学系，所以现在是个数据工程师。"},{"title":"Categories","date":"2018-02-03T20:15:40.000Z","updated":"2018-02-04T02:22:08.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-05T00:49:30.358Z","updated":"2018-02-04T21:58:18.000Z","comments":true,"path":"css/d3jstomarkdown.css","permalink":"http://yoursite.com/css/d3jstomarkdown.css","excerpt":"","text":"div.example { font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; } .box { font: 10px sans-serif; } .box line, .box rect, .box circle { fill: #fff; stroke: #000; stroke-width: 1.5px; } .box .center { stroke-dasharray: 3,3; } .box .outlier { fill: none; stroke: #ccc; } var margin = {top: 10, right: 50, bottom: 20, left: 50}, width = 120 - margin.left - margin.right, height = 500 - margin.top - margin.bottom; var min = Infinity, max = -Infinity; var chart = d3.box() .whiskers(iqr(1.5)) .width(width) .height(height); d3.csv(\"/morley.csv\", function(error, csv) { var data = []; csv.forEach(function(x) { var e = Math.floor(x.Expt - 1), r = Math.floor(x.Run - 1), s = Math.floor(x.Speed), d = data[e]; if (!d) d = data[e] = [s]; else d.push(s); if (s > max) max = s; if (s < min) min = s; }); chart.domain([min, max]); var svg = d3.select(\"div#example\").selectAll(\"svg\") .data(data) .enter().append(\"svg\") .attr(\"class\", \"box\") .attr(\"width\", width + margin.left + margin.right) .attr(\"height\", height + margin.bottom + margin.top) .append(\"g\") .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\") .call(chart); setInterval(function() { svg.datum(randomize).call(chart.duration(1000)); }, 2000); }); function randomize(d) { if (!d.randomizer) d.randomizer = randomizer(d); return d.map(d.randomizer); } function randomizer(d) { var k = d3.max(d) * .02; return function(d) { return Math.max(min, Math.min(max, d + k * (Math.random() - .5))); }; } // Returns a function to compute the interquartile range. function iqr(k) { return function(d, i) { var q1 = d.quartiles[0], q3 = d.quartiles[2], iqr = (q3 - q1) * k, i = -1, j = d.length; while (d[++i] < q1 - iqr); while (d[--j] > q3 + iqr); return [i, j]; }; }"},{"title":"Tags","date":"2018-02-03T20:05:41.000Z","updated":"2018-02-04T02:18:44.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"02112018-1336","slug":"02112018-1336","date":"2018-02-11T18:36:45.000Z","updated":"2018-02-11T18:36:45.740Z","comments":true,"path":"2018/02/11/02112018-1336/","link":"","permalink":"http://yoursite.com/2018/02/11/02112018-1336/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"给博客换模板 - From Jekyll To Hexo","slug":"02012018-2301","date":"2018-02-02T04:01:25.000Z","updated":"2018-02-11T18:47:54.628Z","comments":true,"path":"2018/02/01/02012018-2301/","link":"","permalink":"http://yoursite.com/2018/02/01/02012018-2301/","excerpt":"","text":"使用Jekyll模板已经两年了，期间修修改改，已经完全看不出其中的结构，完全不想再碰。正好看中了更顺眼的Hexo Theme，干脆来个一次性大换血，也顺便整理一下这几年来的总结。 Jekyll已经乱成了这样，大量的文件被放在总目录下，杂乱无章： 1234567891011builderqing.github.io-directory-tree/├── ._config.yml├── _data├── _includes├── _layouts├── _sass├── _templates├── dataset├── gallery├── image└── project 新建的Hexo使用了hiker theme，好看又好用： 123456builderqing.github.io-directory-tree/├── ._config.yml├── public├── scaffolds├── source└── themes","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Jekyll","slug":"Jekyll","permalink":"http://yoursite.com/tags/Jekyll/"}]},{"title":"Basic SQL and Advanced SQL Notes","slug":"02052018-1745","date":"2017-01-02T20:00:00.000Z","updated":"2018-02-11T19:07:02.881Z","comments":true,"path":"2017/01/02/02052018-1745/","link":"","permalink":"http://yoursite.com/2017/01/02/02052018-1745/","excerpt":"","text":"SQL SyntaxDATABASE: Database is a collection of data stored in some organized fashion.DATABASE MANAGEMENT SYSTEM(DBMS): Database software, we manipulate data via DBMS.TABLE: Table is a structured file that store data for a specific type. The table name is always unique - meaning no other table in that database can have the same name.Schema: Information about database and table layout and properties.Column: Tables are made up of columns. Each column in a database has an associated data type.Data type: a type of allowed data. Data types restrict the type of data that can be stored in a column.Row: Data in a table is stored in rows.Primary Key: A column(or columns) whose values uniquely identify every row in a table. No null values [ROW - Select Row]How to use the SQL SELECT statement to retrieve a single table columns.Multiple SQL statements must be separated by semicolonsSQL statements are case-insensitive, while the names of tables, columns and values are not.All extra white space within a SQL Statement is ignored when that statement is processed.Select one column Select column_name From Products;Select multiple columns Select column_name1,column_name2,column_name3 From Products;Select all columns SELECT * FROM Products;Select distinct rows SELECT DISTINCT column_name FROM Products;Select limit results SELECT column1,column2,… FROM table LIMIT offset , count; Select column_name From Products where Limit 5 offset 5; //return 5 rows starting from row 5 Or Select column_name From Products Where Limit OFFSETNUM,LIMITNUM; //limit后面不可以跟表达式Set comments – or # or / / [ROW - Order By]How to use the SELECT statement’s ORDER BY clause to sort retrieved dataORDER BY clause is the last clause in your SELECT statement. (put it at the end)ASC = Ascending order(default), DESC=Descending orderUsing FIELD() function to define your own custom sort order, not ASC or DESCSorting data Select column_name From Products Order by column_nameSorting by multiple columns Select column_name1,column_name2,column_name3 From Products Order by column_name2,column_name3 OR Select column_name1,column_name2,column_name3 From Products Order by 2,3Sorting different direction Select column_name1,column_name2,column_name3 From Products Order by 2 DESC, 3 ASC;Sorting by custom order select orderNumber,status from orders order by FIELD(status, ‘In Process’, ‘On Hold’, ‘Cancelled’, ‘Resolved’, ‘Disputed’, ‘Shipped’); SELECT CONCAT(prefix, suffix) FROM items ORDER BY prefix , suffix; [ROW - Search Conditions]How to specify search conditionsIf we want to extract subset of the table’s data as needed for specific operations or reports.The single quotes are used to delimit a string.WHERE is used not only with the SELECT but also DELETE and UPDATESelect special items SELECT column_name1,column_name2 FROM Products WHERE column_name1 = number;Check for no value SELECT column_name FROM Customers WHERE column _name IS NULL;= Equal&lt;&gt; Not equal. Note: In some versions of SQL this operator may be written as != Greater than&lt; Less than= Greater than or equal&lt;= Less than or equalBETWEEN Between an inclusive range (range) SELECT * FROM employee_tbl expr [NOT] BETWEEN begin_expr AND end_expr; WHERE daily_typing_pages BETWEEN 170 AND 300;LIKE Search for a pattern/ LIKE ‘%$_20%’ ESCAPE ‘$’; or LIKE ‘%\\$_20%’ TO escape characterIN To specify multiple possible values for a column SELECT firstname, city, state FROM customers WHERE state IN (‘Arizona’, ‘Washington’, ‘Oklahoma’, ‘Colorado’, ‘Hawaii’);IS NULL To test whether a value is NULL or not [Boolean]How to use the NOT and IN operators?If we want to extract subset of the table’s data as needed for specific operations or reports.The single quotes are used to delimit a string.The IN operator is the same as ORIN takes a comma-delimited list of valid values, all enclosed within parenthesesUsing the AND(RANK HIGHER) SELECT column_name1,column_name2 FROM Products WHERE column_name1 = number1 AND column_name2 = number2;Using the OR SELECT column_name1,column_name2 FROM Products WHERE column_name1 = number1 OR column_name2 = number2;Using the IN SELECT column_name1,column_name2 • Far cleaner and easier to read FROM Products • Easier to manage WHERE column_name1 IN (val1,val2) • Can contain another SELECTUsing the NOT SELECT column_name1,column_name2 • Used before the column to filter on FROM Products WHERE column_name1 NOT IN (val1,val2) #IN operator can contain another SELECT StatementUsing the Exist SELECT employeenumber, firstname, lastname, extension FROM employees WHERE exists( SELECT 1 FROM offices WHERE city = ‘San Francisco’ and offices.officeCode = employees.officeCode); [ROW - Like and Wildcard]How to perform wildcard searches?-LIKEHow to create search pattern to compare against your data?% represents zero, one, or more characters at the specified location in the search pattern don’t overuse wildcats for processing takes long time Percent sign(%) SELECT column_name • Match any number of occurrences of any character FROM Products WHERE column_name LIKE ‘Fish%’ // accept any characters after the word ‘Fish’ SELECT column_name FROM Products WHERE column_name LIKE ‘%Fish%’ // accept any characters before or after the word ‘Fish’ SELECT column_name FROM Products WHERE columnname LIKE ‘F%i’ // accept any products that begin with F and end with a i Underscore() SELECT column_name • Just like %, but just a single character matching. FROM Customers WHERE column name LIKE ‘ inch’ Brackets([]) SELECT column_name • Used to specify a set of characters FROM Customers WHERE column_name LIKE ‘[JM]%’ ORDER BY column_name;// start with J or M [ROW - Aliases and Concat columns]How to use aliases to refer to fields?How to create fields?What calculated fields are?Aliases can be used when you create a calculated field, renaming a column if the real table column name contains illegal characters, or changing the ambiguous name. Concatenate // use concat • Joining values together to form a single long value. Join column and column SELECT concat(vend_name, ‘ (‘ , vend_country ,’)’) FROM Vendors ORDER BY vend_name; Trim the padding space • RTRIM() trims all space from the right of a value • LTRIM() trim all the left side of a string • TRIM() trims both the right and leftUsing aliases SELECT column_name AS aliases FROM Customers WHERE column_name IS NULL;SQL Mathematical operators +addition -Subtraction *Multiplication /Division [ROW - Mathematic Functions]What types of function DBMSs support?How to use these functions?Very few functions are supported identically by all major DBMSs.We can functions in other parts of the SELECT statement, as well as in other SQL statements.Text manipulation functions SELECT column_name1,UPPER(column_name2) // convert text to upper case SELECT column_name1,column_name2 FROM Customers WHERE SOUNDEX(column_name1) = soundex(‘name’); // SOUNDEX takes into account similar sounding characters and syllables, enabling strings to be compared by how they sound rather than how they have been typed. Date and time manipulation functions SELECT order_num FROM Orders WHERE year(order_date) = 2012;// in MySQL and MariaDBNumeric manipulation functions [Lesson Eight - Aggregate Functions]How to use SQL aggregate functions to summarize table dataThese functions enable you to perform all the types of retrieval just enumeratedAll ignore NULL values Aggregate functions [Lesson Nine - Group By and having]Introduce the GROUP BY clause and the HAVING clauseYou can perform aggregate calculations on each group.GROUP BY clause must come after any WHERE clause and before any ORDER BY clauseSELECT c1, c2,…, cn, aggregate_function(ci)FROM tableWHERE where_conditionsGROUP BY c1 , c2,…,cn;DIFF: HAVING AND WHERE HAVING is very similar to WHERE. The only difference is that WHERE filters rows and HAVING filters groups. SELECT vend_id, COUNT() AS num_prods FROM Products WHERE prod_price &gt;= 4 GROUP BY vend_id HAVING COUNT() &gt;= 2;DIFF: ORDER BY &amp; GROUP BY As a rule, anytime you use a GROUP BY clause, you should also specify an ORDER BY clause. That is the only way to ensure that data will be sorted properly. Never rely on GROUP BY to sort your data.Conclusion [ROW - Subqueries]What subqueries are?How to use subqueries?Subqueries are queries that are embedded into other queries.Subqueries is nested inside another query such as SELECT, INSERT, UPDATE, DELETE. Subqueries select cust_name, cust_state, (SELECT COUNT(*) FROM Orders WHERE Orders.cust_id = Customers.cust_id) AS orders FROM Customers ORDER BY cust_name; [TABLE - join/self-join/inner/outer/]The key here is that having multiple occurrences of the same data is never a good thing, and that principle is the basis for relational database design. The tables are related to each other through common values.A well-designed database or application is said to scale well.If we want to retrieve data in multiple tables with a single SELECT statement, Use JOINJOIN clause is not a physical entity, and is created by the DBMS as needed.Creating a join SELECT vend_name, prod_name, prod_price FROM Vendors,Products WHERE Vendors.vend_id = Products.vend_id; //use this to inner joinCartesian product The results returned by a table relationship without a join condition. The number of rows retrieved will be the number of rows in the first table multiplied by the number of rows in the second table. Sometimes you’ll hear the type of join that returns a Cartesian Product referred to as a cross join. SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name=table2.column_name; or: SELECT column_name(s) FROM table1 JOIN table2 ON table1.column_name=table2.column_name; SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name=table2.column_name; or: SELECT column_name(s) FROM table1 LEFT OUTER JOIN table2 ON table1.column_name=table2.column_name; SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name=table2.column_name; or: SELECT column_name(s) FROM table1 RIGHT OUTER JOIN table2 ON table1.column_name=table2.column_name; NOT SUPPORT IN MYSQL SELF JOIN SELECT a.column_name, b.column_name… FROM table1 a, table1 b WHERE a.common_field = b.common_field;CROSS JOIN SELECT * FROM T1 CROSS JOIN T2; [ROW- Union/Intersect]How to use the UNION operator to combine multiple SELECT statements into one result set.The combined queries are usually known as unions or compound queries.Each query in a UNION must containThe INTERSECT operator is a set operator that returns only distinct rows of two queries.Using union SELECT cust_name, cust_contact, cust_email FROM Customers WHERE cust_state IN (‘IL’,’IN’,’MI’) UNION SELECT cust_name, cust_contact, cust_email FROM Customers WHERE CUST_NAME = ‘fUN4All’; Equal to SELECT cust_name, cust_contact, cust_email FROM Customers WHERE cust_state IN (‘IL’,’IN’,’MI’) OR CUST_NAME = ‘fUN4All’; Using union all SELECT City FROM Customers • Don’t eliminate duplicates UNION ALL SELECT City FROM Suppliers ORDER BY City;Using Intersect (SELECT column_list • The order and the number of columns must be the same. FROM table_1) • The data types of the corresponding columns must be compatible. INTERSECT (SELECT column_list FROM table_2);Intersect = DISTINCT + INNER JOIN SELECT DISTINCT id FROM t1 INNER JOIN t2 USING(id);INTERSECT=DISTINCT + IN SELECT DISTINCT id FROM t1 WHERE id IN (SELECT id FROM ) [ROW- Insert Update/Delete a Row]Inserting a single complete rowInserting a single partial rowInserting the results of a queryTo update specific rows in a tableTo update all rows in a tableTo delete specific rows in a tableTo delete all rows in a tableIf you omit the WHERE clause, the UPDATE statement will update all rows in the table.Inserting a single complete row insert into “tablename” (first_column,…last_column) VALUES (first_value,…last_value);Inserting a single partial row INSERT INTO Customers (CustomerName, City, Country) VALUES (‘Cardinal’, ‘Stavanger’, ‘Norway’);Insert + Select SELECT * FROM TASKS; CREATE TABLE tasks_1 like tasks; Insert into tasks_1 select from tasks;Update a column UPDATE [LOW_PRIORITY] [IGNORE] table_name SET column_name1 = expr1, column_name2 = expr2, … WHERE condition;Using UPDATE with INNER JOIN|LEFT JOIN, just change employees. UPDATE employees LEFT JOIN merits ON employees.performance = merits.performance SET salary = salary + salary 0.015 WHERE merits.percentage IS NULL; Delete a row DELETE FROM table [WHERE conditions] [ORDER BY …] [LIMIT rows] delete from “tablename” where “columnname” OPERATOR “value” [and|or “column” OPERATOR “value”];Delete data from multiple tables DELETE table_1, table_2,… FROM table-refs [WHERE conditions] DELETE FROM table_1, table_2,… USING table-refs [WHERE conditions]Using DELETE with INNER JOIN|LEFT JOIN, just change employees. DELETE offices, employees FROM offices INNER JOIN employees ON employees.officeCode = employees.officeCode WHERE offices.officeCode = 5 //Now, you can delete records associated with officeCode 5 from both offices and employees tables: DELETE T1 FROM T1 LEFT JOIN T2 ON T1.key = T2.key WHERE T2.key IS NULL [TABLE - Alter or Create or Drop table]The difference between ALTER and CREATE TABLE.CREATE TABLE tableName [LIKE] anothertableName CREATE TABLE customers_archive LIKE customers; INSERT INTO customers_archive SELECT * FROM customersDrop a table(not delete a row): The drop table command is used to delete a table and all rows in the table. drop table “tablename”Difference between drop and delete Deleting all of the records in the table leaves the table including column and constraint information. Dropping the table removes the table definition as well as all of its rows.Alter: is very useful when you want to change a name of your table, any table field or if you want to add or delete an existing column in table ALTER TABLE testalter_tbl DROP i; ALTER TABLE testalter_tbl ADD i INT FIRST; ALTER TABLE testalter_tbl MODIFY c CHAR(10); [TABLE - Create Constraints]An index can be created in a table to find data more quickly and efficiently.Efficiently checking in a middle sizecreate constraint 1 CREATE UNIQUE INDEX index_name ON table_name (column_name)create constraint 2 SQL ALTER TABLE + ADD/DROP CONSTRAINT SyntaxCreate Primary key: CREATE TABLE tableName( • A primary key column cannot contain NULL values. It means that you have to declare the primary key column with the NOT NULL attribute. PRIMARY KEY(columnName), • A table has only one primary key. FOREIGN KEY(columnName) REFERENCES tableName(columnName), • A table can have multiple foreign key FOREIGN KEY(columnName) REFERENCES tableName(columnName) );Add Primary key: ALTER TABLE tableName ADD PRIMARY KEY(columnName)Other constraints:ALTER TABLE table_nameCHANGE old_column_name new_column_name new_column_definition; ALTER TABLE table_nameADD COLUMN columnName type AFTER othercolumnName ALTER TABLE table_nameADD FOREIGN KEY columnName REFERENCES table(columnName) ALTER TABLE table_nameDROP CONSTRAINT constraint_name; ALTER TABLE table_nameDROP FOREIGN KEY column_name [TABLE - Alter Table]Set default for a new tableAlter a default for an original tableNew table : CREATE TABLE IF NOT EXISTS tasks (CREATE TABLE [IF NOT EXISTS] tableName( task_id INT(11) NOT NULL AUTO_INCREMENT,Column_list) engine = table_type; subject VARCHAR(45) DEFAULT NULL,//InnoDB, MyISAM, HEAP, EXAMPLE, CSV, ARCHIVE, MERGE FEDERATED or NDBCLUSTER start_date DATE DEFAULT NULL, end_date DATE DEFAULT NULL, description VARCHAR(200) DEFAULT NULL, PRIMARY KEY (task_id) ) ENGINE=InnoDBOther functions about ALTER: 只针对column进行变化。 ALTER TABLE tasks CHANGE COLUMN task_id task_id INT(11) not null auto_increment; select * from tasks; ALTER TABLE tasks ADD COLUMN complete DECIMAL(2,1) null AFTER start_date; ALTER TABLE tasks DROP COLUMN complete; ALTER TABLE tasks RENAME TO work_items; ALTER TABLE task ADD CONSTRAINT constraintName [TABLE - Truncate Table]is used to remove all records from a table in SQL server. It perform the same function as a DELETE without a WHEREIf you are using InnoDB tables, MySQL will check if there are any foreign key constraints available in the tables before deleting data. The following are cases: • If the table has any foreign key constraints, the TRUNCATE TABLE statement deletes rows one by one. If the foreign key constraint has DELETE CASCADE action, the corresponding rows in the child tables are also deleted. • If the foreign key constraint does not specify the DELETE CASCADE action, the TRUNCATE TABLE deletes rows one by one, and it will stop and issue an error when it encounters a row that is referenced by a row in a child table. • If the table does not have any foreign key constraint, the TRUNCATE TABLEstatement drops the table and recreates a new empty one with the same structure, which is faster and more efficient than using the DELETE statement especially for big tables.If you are using other storage engines, the TRUNCATE TABLE statement just drops and recreates a new table.Notice that the TRUNCATE TABLE statement resets auto increment value to zero if the table has an AUTO_INCREMENT column.In addition, the TRUNCATE TABLE statement does not use the DELETE statement, therefore, the DELETE triggers associated with the table will not be invoked. Truncate table TRUNCATE TABLE [database_name.] [schema_name.] table_name [ WITH ( PARTITIONS ( partition_number | partition_number TO partition_number ) ] ;Truncate table and delete table TRUNCATE TABLE tableName;[the difference between this two is that DELETE can roll back if you choose, but TRUNCATE will not] Equal to DELETE FROM tableName; [TABLE - REPLACE Table - not usual]If the new row already does not exist, the MySQL REPLACE statement inserts a new row.If the new row already exist, the REPLACE statement deletes the old row first and then inserts a new row. In some cases, the REPLACE statement updates the existing row only.Using replace REPLACE INTO cities(id,population) VALUES(2,3696820); The REPLACE statement first inserts the new row into the cities table with the information provided by the column list. The insertion fails because the row with id 2 already exists in the cities table, therefore, MySQL raises a duplicate-key error. The REPLACE statement then updates the row that has the key specified in the value of the id column. In the normal process, it would delete the old row with conflict id first and then inserts a new row.Replace and Insert REPLACE INTO table_name(column_list) VALUES(value_list); INSERT INTO table_name(column_list) VALUES(value_list); If the column that has the NOT NULL attr and does not have a default value, and you don’t specify the value in the REPLACE, MYSQL will raise an errorReplace and Update REPLACE INTO table SET column replace into citites set id = 4, name = ‘Phoenix’, population = 1768980; update citites set id = 4, name = ‘Phoenix’, population = 1768980;//raise error [SQL ADVANCE - Additional Aggregate Functions]Function DescriptionAVG() Returns the average valueCOUNT() Returns the number of rowsFIRST() Returns the first valueLAST() Returns the last valueMAX() Returns the largest valueMIN() Returns the smallest valueROUND() Rounds a numeric field to the number of decimals specifiedSUM() Returns the sumSQL String FunctionsFunction DescriptionCHARINDEX Searches an expression in a string expression and returns its starting position if foundCONCAT()LEFT()LEN() / LENGTH() Returns the length of the value in a text fieldLOWER() / LCASE() Converts character data to lower caseLTRIM()SUBSTRING() / MID() Extract characters from a text fieldPATINDEX()REPLACE()RIGHT()RTRIM()UPPER() / UCASE() Converts character data to upper caseMySQL Date FunctionsFunction DescriptionNOW() Returns the current date and timeCURDATE() Returns the current dateCURTIME() Returns the current timeDATE() Extracts the date part of a date or date/time expressionEXTRACT() Returns a single part of a date/time SELECT EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, EXTRACT(DAY FROM OrderDate) AS OrderDay FROM Orders WHERE OrderId=1DATE_ADD() Adds a specified time interval to a dateDATE_SUB() Subtracts a specified time interval from a dateDATEDIFF() Returns the number of days between two datesDATE_FORMAT() Displays date/time data in different formatsSQL Server Date FunctionsFunction DescriptionGETDATE() Returns the current date and timeDATEPART() Returns a single part of a date/time SELECT DATEPART(yyyy,OrderDate) AS OrderYear, DATEPART(mm,OrderDate) AS OrderMonth, DATEPART(dd,OrderDate) AS OrderDay FROM Orders WHERE OrderId=1DATEADD() Adds or subtracts a specified time interval from a dateDATEDIFF() Returns the time between two datesCONVERT() Displays date/time data in different formatsMySQL comes with the following data types for storing a date or a date/time value in the database: • DATE - format YYYY-MM-DD • DATETIME - format: YYYY-MM-DD HH:MI:SS • TIMESTAMP - format: YYYY-MM-DD HH:MI:SS • YEAR - format YYYY or YY [SQL ADVANCE - MySQL Transactions - Not Usually ]Source: https://www.tutorialspoint.com/mysql/mysql-transactions.htmMySQL enables you to execute a set of MySQL operations to ensure that the database never contains the result of partial operation. If one of them fails, the rollback occurs to restore the database. If no error occurred, the entire set of statements is committed to the database. JUST IN INNODBThe difference between MyISAM and InnoDB:The main difference are support for “referential integrity” and “transactions” MyISAM InnoDB构成上的区别： Stores its tables, data and indexes in diskspace using sparate 3 different files(.FRM, .MYD, .MYI) Tables and indexes in a tablespace，一般为 2GB事务处理上方面: Faster than InnoDB, designed for need of speed/ no foreign keys/ no transaction, no commit and rollback Enforce foreign key constraints, or support transactionsSELECT UPDATE,INSERT，Delete操 作 Good for a lot of SELECT Statements. 1.如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表 2.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的 删除。 3.LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性（例如外键）的表不适用对AUTO_INCREMENT的 操作 每表一个AUTO_INCREMEN列的内部处理。 如果你为一个表指定AUTO_INCREMENT列，在数据词典里的InnoDB表句柄包含一个名为自动增长计数 器的计数器，它被用在为该列赋新值。 MyISAM为INSERT和UPDATE操 作自动更新这一列。这使得AUTO_INCREMENT列更快（至少10%）。在序列顶的值被删除之后就不 能再利用。(当AUTO_INCREMENT列被定义为多列索引的最后一列， 可以出现重使用从序列顶部删除的值的情况）。 自动增长计数 器仅被存储在主内存中，而不是存在磁盘上 AUTO_INCREMENT值可用ALTER TABLE或myisamch来重置 关于该计算器 的算法实现，请参考 对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但 是在MyISAM表中，可以和其他字段一起建立联 合索引 AUTO_INCREMENT列 在InnoDB里 如何工作 更好和更快的auto_increment处理表 的具体行数 select count() from table,MyISAM只要简单的读出保存好的行数，注意的是，当count()语句包含 where条件时，两种表的操作是一样的 InnoDB 中不 保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行lock A DML statement will obtain an exclusive lock, no other session perform a SELECT or a DML operation on the table(table-level locking) locking on row level)​ Properties of Transactions: 1. Atomicity: ensure all operations within the work unit are completed. 2. Consistency: ensure the database properly changes states 3. Isolation: ensure transactions to operate independently and transparent to each other 4. Durability: ensure the result persists in case of a system failure commit and rollback (for different databases): 5. Commit command should be issued if the transaction is completed(need commit to update) 6. If a failure occurs, a rollback command should be issued to return in the transaction to its previous state.(if any operation within the transaction fails, the entire transaction will fail. For atomicity) There are some statements cannot use within a transaction. CREATE / ALTER / DROP DATABASE CREATE / ALTER / DROP / RENAME / TRUNCATE TABLE CREATE / DROP INDEX CREATE / DROP EVENT CREATE / DROP FUNCTION CREATE / DROP PROCEDURE … MySQL automatically commits the changes to the database by default. 可以防止在删除时大错误的发生,常在商务级应用中使用。 Table locking: for preventing other sessions from accessing the table during a specific period. A client can acquire or release table locks only for itself. Sessions is different clients. Acquire a lock LOCK TABLES table_name [READ | WRITE] Release a lock UNLOCK TABLES;Table locking for read: can be acquired by multiple sessions at the same time; other sessions can not write antil the read is release; MySQL will release all the locks implicitly. SELECT connection_id(); SHOW processlist; [SQL ADVANCE - Prepared Statement] To make your queries execute faster and more secure. Use the prepare statement to prepare a statement for execution. Question mark is a placeholder for the productCode. #prepared statement http://www.mysqltutorial.org/mysql-prepared-statement.aspx Declare a produceCode variable and set it values to ‘S10_1678’ Use DEALLOCATE PREPARE to release PREPARE statement. prepare stmt1 from ‘SELECT productCode, productName FROM products WHERE productCode=?&apos;; set @pc=&apos;S10_1678&apos;; execute stmt1 USING @pc; DEALLOCATE PREPARE stmt1; [SQL ADVANCE - triggers - not usually]A set of SQL statements stored in the database catalog. And is executed whenever an event associated with a table occurs. (a special type of stored procedure). The main difference between a trigger and a stored procedure is that a trigger is called automatically when a data modification event is made whereas a store procedure must be called explicitly.Advantages • SQL triggers provide an alternative way to check the integrity of data. • SQL triggers can catch errors in business logic in the database layer. • SQL triggers provide an alternative way to run scheduled tasks. By using SQL triggers, you don’t have to wait to run the scheduled tasks because the triggers are invoked automatically before or after a change is made to the data in the tables. • SQL triggers are very useful to audit the changes of data in tables.Disadvantages • SQL triggers only can provide an extended validation and they cannot replace all the validations. Some simple validations have to be done in the application layer. For example, you can validate user’s inputs in the client side by using JavaScript or in the server side using server-side scripting languages such as JSP, PHP, ASP.NET, Perl, etc. • SQL triggers are invoked and executed invisible from the client applications, therefore, it is difficult to figure out what happen in the database layer. • SQL triggers may increase the overhead of the database server. Important words in SQL triggers:BEFORE INSERT – activated before data is inserted into the table.AFTER INSERT – activated after data is inserted into the table.BEFORE UPDATE – activated before data in the table is updated.AFTER UPDATE – activated after data in the table is updated.BEFORE DELETE – activated before data is removed from the table.AFTER DELETE – activated after data is removed from the table.Triggers storage:MySQL stores triggers in a data directory e.g., /data/classicmodels/ with the files named tablename.TRG and triggername.TRN :The tablename.TRG file maps the trigger to the corresponding table.the triggername.TRN file contains the trigger definition.LIMITATIONS(CANNOT DO):• Use SHOW, LOAD DATA, LOAD TABLE, BACKUP DATABASE, RESTORE, FLUSH and RETURN statements.• Use statements that commit or rollback implicitly or explicitly such as COMMIT , ROLLBACK , START TRANSACTION , LOCK/UNLOCK TABLES , ALTER , CREATE , DROP , RENAME , etc.• Use prepared statements such as PREPARE, EXECUTE, etc.• Use dynamic SQL statements. Syntax:CREATE TRIGGER trigger_nametrigger_time trigger_eventON table_nameFOR EACH ROWBEGIN…END;Drop triggers:DROP TIGGER table_name.trigger_name; [TABLE - VIEWS] like Excel• It is a logic table, which contains no value but have table structure, you can query data against it.​• Database system stores database views as a SQL SELECT statement with joins. When the data of the tables changes, the view reflects that changes.• THE View is in SHOW TABLES results. Use SHOW FULL TABLE Advantages Syntax:• ALLOW you to simplify complex queries. You can hide complexity of underlying tables to the end-users CREATE• Helps limit data access to specific users. To expose non-sensitive data to specific group of users. [ALGORITHM = {MERGE | TEMPTABLE | UNDEFINED}]• Provides extra security layer. Can create read-only view VIEW [database_name].[view_name]• Enables computed columns AS• Enable backward compatibility. [SELECT statement] Disadvantages• Querying data from a database view can be slow, especially the view is created based on other views• Tables dependency: you create a view based on underlying tables [TABLE - Stored Procedures]A stored procedure can be invoked by triggers.Major Diff: A Function can be used in the SQL Queries while a procedure cannot be used in SQL queries Advantages• Increase the performance of the applications. Stored procedures are compiled and stored in the database. If an application uses a stored procedure multiple times in a single connection, the compiled version is used, or the stored procedure works like a query.• Help reduce the traffic between application and database server.• Can reusable and transparent to any application.• Are secure. The database administrator can grant appropriate permissions to applications that access stored procedures Disadvantages• If you use a lot of stored procedures, the memory usage of every connection will increase substantially• constructs of stored procedures make it more difficult to develop stored procedures• Difficult to debug stored procedures• Not easy to develop and maintain stored procedures. Examples:Create procedure – stored procedure delimiter // – not related to the sp syntax. change the ; to //, we avoid mysql tool interpret – at a time and pass the sp to the server as a whole. // at the end indicates the end – of the stored procedure. create procedure GetAllProducts() – name of procedure is GetAllProducts begin – begin and end is the body of the stored procedure select * from products; end// delimiter ;Call procedure CALL STORED_PROCEDURE_NAME();Declare variable DECLARE variable_name datatype(size) DEFAULT default_value;Parameters IN[DEFAULT]/ OUT/ INOUT DEFINE A PARAMETER: MODE param_name param_type(param_size) [SQL - IF ] Syntax:IF expression THEN statements;END IF; Syntax:IF expression THEN statements;ELSE else-statements;END IF; Syntax:IF expression THEN statements;ELSEIF elseif-expression THEN elseif-statements;…ELSE else-statements;END IF; Syntax:CASE WHEN [condition] THEN result[WHEN [condition]THEN result …][ELSE result]END SELECT CASE 1 WHEN 1 THEN ‘this is case one’WHEN 2 THEN ‘this is case two’ELSE ‘this is not in the case’END as ‘how to execute case statement’; [SQL - Important MySQL Function]Source:FIELDCAST like str()/int(): convert a value of any type into a value(BINARY, CHAR, DATE, DATETIME, TIME, DECIMAL, SIGNED, UNSIGNED)IFNULL() : IFNULL(expression_1,expression_2); The IFNULL function returns expression_1 if expression_1 is not NULL ; otherwise, it returns expression_2.RAND():generates a random value for each row in the table.select *from employeeswhere jobtitle = ‘Sales Rep’ORDER BY RAND()LIMIT 1;NOW()/ CURDATE()/CURTIME()DATE_ADD(date, interval number type)GROUP_CONCAT():If you do not specify a separator, the GROUP_CONCAT function uses a comma (,) as the default separator.SELECT GROUP_CONCAT(DISTINCT v ORDER BY v ASC SEPARATOR ‘;’)FROM t;SELECT user();SELECT SESSION_USER();SELECT system_user();SELECT VERSION(); [ALL PROBLEMS ABOUT SQL] Constraint name: • NOT NULL - Indicates that a column cannot store NULL value • UNIQUE - Ensures that each row for a column must have a unique value • PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Ensures that a column (or combination of two or more columns) have a unique identity which helps to find a particular record in a table more easily and quickly • FOREIGN KEY - Ensure the referential integrity of the data in one table to match values in another table • CHECK - Ensures that the value in a column meets a specific condition • DEFAULT - Specifies a default value for a column: ALTER column_name SET DEFAULT ‘value’ CREATE TABLE Orders ( O_Id int NOT NULL, OrderNo int NOT NULL, P_Id int, PRIMARY KEY (O_Id), FOREIGN KEY (P_Id) REFERENCES Persons(P_Id) ) THE CONS OF ASTERISK: • The asterisk return data from the columns produces unnecessary I/O disk and network traffic between the server and application. • Expose many sensitive information to unauthorized users. Distinct and Group By: • The Group by behaves like the distinct clause. • Group By clause sorts the result set whereas the Distinct clause does not. • Group By = DISTINCT + ORDER BY How many ways to define a variable? 1. User-defined variables(prefixed with @), if you refer to a variable that has not been inialized, it has a value of null SELECT @variable_1 := 1, @variable_2 := 10;Or SET @variable_1 = 1, @variable_2 = 10; User variables can be assigned a value from integer, decimal, floating-point, binary, string or NULL. 2. Local variables(no prefix), using DECLARE before accessing it. The scope of a local variable is the BEGIN…END block within which is declared: DELIMITER // CREATE PROCEDURE sp_test(var1 INT) BEGIN DECLARE start INT unsigned DEFAULT 1; DECLARE finish INT unsigned DEFAULT 10; SELECT var1, start, finish; SELECT * FROM places WHERE place BETWEEN start AND finish; END; // DELIMITER ; 3. Server system variable(prefixed with @@),default value includes GLOBAL, SESSION or BOTH. -- Syntax to Set value to a Global variable: SET GLOBAL sort_buffer_size=1000000; SET @@global.sort_buffer_size=1000000; -- Syntax to Set value to a Session variable: SET sort_buffer_size=1000000; SET SESSION sort_buffer_size=1000000; SET @@sort_buffer_size=1000000; SET @@local.sort_buffer_size=10000; The difference between EXISTS And IN in SQL? (SOURCE: http://www.mysqltutorial.org/mysql-exists/) • EXISTS works based on the “at least found” principle, it returns true and stops scanning table once at least one mathcing row found. • IN operator is combined with a subquery, and MYSQL will process the subquery firsts and uses the result of the subquery to process the whole query. • EXISTS is much faster than IN, when the sub-query results is very large. • IN is faster than EXISTS, when the sub-query results is very small. SELECT customerNumber, customerName FROM customers WHERE customerNumber IN (SELECT customerNumber FROM orders); SELECT customerNumber, customerName FROM Customers WHERE EXIST(SELECT 1 FROM orders WHERE orders.customernumber = Customers.customernumber) SELECT FROM Customers WHERE EXISTS ( SELECT FROM Orders WHERE Orders.CustomerID = Customers.ID ) can be rewritten to: SELECT FROM Customers WHERE ID IN ( SELECT CustomerID FROM Orders ) or with a join: SELECT Customers. FROM Customers INNER JOIN Orders ON Customers.ID = Orders.CustomerID Distinct and groupby take different execution plans SELECT DISTINCT business_key FROM memory WHERE concept &lt;&gt; ‘case’ or attrib &lt;&gt; ‘status’ or value &lt;&gt; ‘closed’ It takes around 90 seconds SELECT business_key FROM memory WHERE concept &lt;&gt; ‘case’ or attrib &lt;&gt; ‘status’ or value &lt;&gt; ‘closed’ GROUP BY business_key And it takes 1 second Reasons ： Distinct is executed like: copy all business_key to temporary table-&gt;sort temporary table-&gt;return different item that is different from the one before it Group by is executed like: scan full table, storing each value of business_key in a hash table -&gt; return the keys of the hash table *About hash table:​​ The difference between TRUNCATE, DELETE and DROP?(SOURCE: http://www.orafaq.com/faq/difference_between_truncate_delete_and_drop_commands)DELETE: Is used to remove rows from a table. A where clause can be used to only remove special rows, or all rows will be removed. You need to COMMIT or ROLLBACK the transaction to undo it.TRUNCATE: removes all rows from a table. Cannot be rolled back and no triggers will be firedDROP: removes a table from the database. No DML triggers will be fired.DROP and TRUNCATE are DDL commands, whereas DELETE is a DML command. Therefore DELETE operations can be rolled back DDL. DML, DCL and TCL(SOURCE: http://www.cnblogs.com/henryhappier/archive/2010/07/05/1771295.html)1.DDL（Data Definition Language）数据库定义语言statements are used to define the database structure or schema.DDL是SQL语言的四大功能之一。用于定义数据库的三级结构，包括外模式、概念模式、内模式及其相互之间的映像，定义数据的完整性、安全控制等约束DDL不需要commit.CREATEALTERDROPTRUNCATECOMMENTRENAME 2.DML（Data Manipulation Language）数据操纵语言statements are used for managing data within schema objects.由DBMS提供，用于让用户或程序员使用，实现对数据库中数据的操作。DML分成交互型DML和嵌入型DML两类。依据语言的级别，DML又可分成过程性DML和非过程性DML两种。需要commit.SELECTINSERTUPDATEDELETEMERGECALLEXPLAIN PLANLOCK TABLE 3.DCL（Data Control Language）数据库控制语言 授权，角色控制等GRANT 授权REVOKE 取消授权 4.TCL（Transaction Control Language）事务控制语言SAVEPOINT 设置保存点ROLLBACK 回滚SET TRANSACTION SQL主要分成四部分：（1）数据定义。（SQL DDL）用于定义SQL模式、基本表、视图和索引的创建和撤消操作。（2）数据操纵。（SQL DML）数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作。（3）数据控制。包括对基本表和视图的授权，完整性规则的描述，事务控制等内容。（4）嵌入式SQL的使用规定。涉及到SQL语句嵌入在宿主语言程序中使用的规则。 Using or on?ON is the more general of the two. One can join tables ON a column, a set of columns and even a condition. For example:SELECT * FROM world.City JOIN world.Country ON (City.CountryCode = Country.Code) WHERE …USING is useful when both tables share a column of the exact same name on which they join. In this case, one may say:SELECT … FROM film JOIN film_actor USING (film_id) WHERE … Query Optimization Methods Use slow query log in mysql to locate the real problemsa. Set global slow_query_log = ‘ON’b. Set global slow.query_log_file = ‘/var/log/mysql/slow-query.log’;c. set global long_query_time = ‘20’;d. [confirm]show variables like ‘%slow%’; Use EXPLAIN and PROFILE to analyze your queries and detect potential issues:a. EXPLAIN SELECT * FROM user;b. Tee out.txtc. Mysql \\T “out.txt” Examples: select distinct cert.emp_idfrom cm_log clinner join ( selectemp.id as emp_id, emp_cert.id as cert_id fromemployee emp left joinemp_certificate emp_cert on emp.id = emp_cert.emp_id whereemp.is_deleted=0 ) cert on (cl.ref_table=&apos;Employee&apos; and cl.ref_oid= cert.emp_id ) or (cl.ref_table=&apos;EmpCertificate&apos; and cl.ref_oid= cert.cert_id )where cl.last_upd_date &gt;=’2013-11-07 15:03:00’ and cl.last_upd_date&lt;=’2013-11-08 16:00:00’; 0.先运行一下，53条记录 1.87秒，又没有用聚合语句，比较慢 53 rows in set (1.87 sec) Use index to optimize the speed of querying: (Source: http://tech.meituan.com/mysql-index.html )a. Index should be special, like count(distinct col)/count()b. Index should not be calculatedc. Index should be more extended , not createdExamples:select from task where status = 0 and type = 12 limit 10;select count(*) from task where status = 0 ; ON DUPLICATE KEY UPDATE: (MySQL special) if you specify the ON DUPLICATE KEY UPDATE option in the INSERT statement, MySQL will insert a new row or update the existing row with the new values.INSERT INTO sample_table(column_1) The statement above sets the value of the column_1 to its current value specified by the expression VALUES(column_1) + 1 if there is a duplicate in UNIQUE or PRIMARY KEY.VALUES(column_1)ON DUPLICATE KEY UPDATE column_1 = VALUES(column_1) + 1;INSERT INTO table(a,b,c) VALUES(1,2,3)ON DUPLICATE KEY UPDATE c=c+1;Equals toUPDATE TABLE SET c=c+1 WHERE a=1; The difference between MODIFY COLUMN, CHANGE COLUMN:Source: http://stackoverflow.com/questions/14767174/modify-column-vs-change-columnMODIFY COLUN does everython CHANGE COLUMN can, but without renaming the column. 修改字段的时候使用CHANGE， 而修改字段类型时候使用MODIFY PRIMARY KEY vs. UNIQUE KEY vs. KEY vs. FOREIGN KEY• A KEY is a synonym for INDEX. You can use KEY is you want to create an index.• A UNIQUE index creates a constraint for a column whose value must be unique, allow NULLL, can have multiple UNIQUE index: For example, the email and username of a user in the users table must be unique Disable Foreign key checks:SET foreign_key-checks = 0// to disable foreign key checks.SET foreign_key-checks = 1 SQL Programming Style: • Use descriptive language to name your column • Column name start with characters. ◊ id 标识符——user_id 用户标识 item_id 商品标识 ◊ dt 表示某个事件发生的时间——ord_dt 订单时间 exam_dt 考试时间 ◊ num 表示某事相关的数字——sale_num 销量 ◊ name 用字母表示名称——stu_name 学生名 等 • Use Tab to make queries in a line. Online SQL Formatter SELECT name, id, sex FROM (SELECT * FROM school_score WHERE class_cd = 110) WHERE sex = “男” AND exam_dt = “2016-06-01”; • Use BETWEEN instead of AND • Use IN instead of OR • Use CASE to handle complex queries • Use UNION SELECT CASE postcode WHEN ‘BN1’ THEN ‘Brighton’ WHEN ‘EH1’ THEN ‘Edinburgh’ END AS city FROM office_locations WHERE country = ‘United Kingdom’ AND opening_time BETWEEN 8 AND 9 AND postcode IN (‘EH1’, ‘BN1’, ‘NN1’, ‘KW1’); • 数据库的schema更新了之后，要立即能知道未来会执行的SQL语句有没有编译错误，不能等到运行的时候才发现。 References: SQL Practice Problems Sams Teach Yourself SQL in 10 Minutes","categories":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"}]},{"title":"Robust and Optimal Stochastic Resource Allocation on Transportation Networks Subject to Disruptive Events","slug":"03012016-1651","date":"2016-03-01T21:51:37.000Z","updated":"2018-02-11T18:34:19.352Z","comments":true,"path":"2016/03/01/03012016-1651/","link":"","permalink":"http://yoursite.com/2016/03/01/03012016-1651/","excerpt":"","text":"The models I built for solving resource allocation problem on transportation networks. Different size of directed graphs have been considered, and comparison between models have been made. Python Gurobi is used to realize the optimization process. Resource allocation is the assignment of available resources to various uses, which is closely related to the network interdiction problem depends on our objects. The network interdiction problem ask to find a special number of edges whose removal from the network minimizes the maximum flow. Various examples could be found in areas such as military planning, hospital infection control or poison food interdiction. Our goals in such examples are the same: to determine the worst-case scenario, after the realization of uncertainty. contentf af afajkhdfjk Imagine that there are refineries that process several million barrels of crude oil every day, and pipelines are used to transport crude oil to consumption centers. There are intermediate pump stations in long distance networks to keep the crude oil moving smoothly. However, pump stations and pipelines may be out of service. Hence, it is important to manage the oil transportation system in such a way that it is capable of coping with such situations and to reduce the amount of storage of crude oil at consumption centers as much as possible. The bold red lines in the above graphs are the critical edges that determines the maximum flow, assuming the realization of uncertainty. QINGQINGJOURNAL ‘S ```","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Optimization","slug":"Optimization","permalink":"http://yoursite.com/tags/Optimization/"},{"name":"Maximum Flow","slug":"Maximum-Flow","permalink":"http://yoursite.com/tags/Maximum-Flow/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]}]}