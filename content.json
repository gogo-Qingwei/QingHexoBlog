{"meta":{"title":"Qing's Journey","subtitle":null,"description":"Coding & Modeling","author":"Qing Wei","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2018-02-03T20:06:44.000Z","updated":"2018-02-04T19:49:56.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Profile 这是一个半路出家的码农的博客。 因为还没学会算法，数据结构，还有各种模式设计，又恰好被录取过数学系，所以现在是个数据工程师。"},{"title":"","date":"2018-02-05T00:49:30.358Z","updated":"2018-02-04T21:58:18.000Z","comments":true,"path":"css/d3jstomarkdown.css","permalink":"http://yoursite.com/css/d3jstomarkdown.css","excerpt":"","text":"div.example { font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; } .box { font: 10px sans-serif; } .box line, .box rect, .box circle { fill: #fff; stroke: #000; stroke-width: 1.5px; } .box .center { stroke-dasharray: 3,3; } .box .outlier { fill: none; stroke: #ccc; } var margin = {top: 10, right: 50, bottom: 20, left: 50}, width = 120 - margin.left - margin.right, height = 500 - margin.top - margin.bottom; var min = Infinity, max = -Infinity; var chart = d3.box() .whiskers(iqr(1.5)) .width(width) .height(height); d3.csv(\"/morley.csv\", function(error, csv) { var data = []; csv.forEach(function(x) { var e = Math.floor(x.Expt - 1), r = Math.floor(x.Run - 1), s = Math.floor(x.Speed), d = data[e]; if (!d) d = data[e] = [s]; else d.push(s); if (s > max) max = s; if (s < min) min = s; }); chart.domain([min, max]); var svg = d3.select(\"div#example\").selectAll(\"svg\") .data(data) .enter().append(\"svg\") .attr(\"class\", \"box\") .attr(\"width\", width + margin.left + margin.right) .attr(\"height\", height + margin.bottom + margin.top) .append(\"g\") .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\") .call(chart); setInterval(function() { svg.datum(randomize).call(chart.duration(1000)); }, 2000); }); function randomize(d) { if (!d.randomizer) d.randomizer = randomizer(d); return d.map(d.randomizer); } function randomizer(d) { var k = d3.max(d) * .02; return function(d) { return Math.max(min, Math.min(max, d + k * (Math.random() - .5))); }; } // Returns a function to compute the interquartile range. function iqr(k) { return function(d, i) { var q1 = d.quartiles[0], q3 = d.quartiles[2], iqr = (q3 - q1) * k, i = -1, j = d.length; while (d[++i] < q1 - iqr); while (d[--j] > q3 + iqr); return [i, j]; }; }"},{"title":"Categories","date":"2018-02-03T20:15:40.000Z","updated":"2018-02-04T02:22:08.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-02-03T20:05:41.000Z","updated":"2018-02-04T02:18:44.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Basic Python and Advanced Python Notes - Part One","slug":"02252018-1134","date":"2018-02-25T16:34:57.000Z","updated":"2018-02-25T16:40:27.200Z","comments":true,"path":"2018/02/25/02252018-1134/","link":"","permalink":"http://yoursite.com/2018/02/25/02252018-1134/","excerpt":"LambdaIf a function will be used just once, use lambda function. No name need, is anonymous function 1234567891011map(lambda x : x + 1, [1, 2, 3] ) F = lambda x:x+1 For i in [1,2,3]: F(i) #Equal\"\"\"Filter offers a way to filter out all the elements of a list, for which the function returns True \"\"\"fib = [0,1,1,2,3,5,8,13,21,34,55] #must be a list result = filter(lambda x: x % 2, fib) #print result [1, 1, 3, 5, 13, 21, 55] result = filter(lambda x: x % 2 == 0, fib)#print result [0, 2, 8, 34] #Find maximum values in a list F = lambda a,b: a if (a&gt;b) else b Reduce(F, [47,11,42,102,13]) #Print 102","text":"LambdaIf a function will be used just once, use lambda function. No name need, is anonymous function 1234567891011map(lambda x : x + 1, [1, 2, 3] ) F = lambda x:x+1 For i in [1,2,3]: F(i) #Equal\"\"\"Filter offers a way to filter out all the elements of a list, for which the function returns True \"\"\"fib = [0,1,1,2,3,5,8,13,21,34,55] #must be a list result = filter(lambda x: x % 2, fib) #print result [1, 1, 3, 5, 13, 21, 55] result = filter(lambda x: x % 2 == 0, fib)#print result [0, 2, 8, 34] #Find maximum values in a list F = lambda a,b: a if (a&gt;b) else b Reduce(F, [47,11,42,102,13]) #Print 102 args, **kwargs, , **,__1234#tuple or list to input parameters for a function. when you're not sure how many arguments might be passed to your function def print_everything(*args): for count, thing in enumerate(args): print '&#123;0&#125;. &#123;1&#125;'.format(count, thing) print_everything('apple', 'banana', 'cabbage') 12345#**kwargs: arbitrary keyword argument dictionarydef table_things(**kwargs): for name, value in kwargs.items(): print '&#123;0&#125; = &#123;1&#125;'.format(name, value) table_things(apple = 'fruit', cabbage = 'vegetable') #cabbage = vegetable apple = fruit 12345678910111213141516171819202122#*: unpack a tuple or list as location parameters#**: unpack a dictionary into keyword parameterestempList = [1,2,3] tempTuple = (2,3,4) tempDict = &#123;'s':3,'m':4,'c':5&#125; def testFunc(*args,**kwargs): print(args,kwargs) testFunc() //() &#123;&#125; testFunc(tempList) // ([1,2,3], ) &#123;&#125; testFunc(tempTuple) //((2,3,4),) &#123;&#125; testFunc(tempDict) //(&#123;'s':3,'m':4,'c':5&#125;,) &#123;&#125; testFunc(*tempList) //(1, 2, 3) &#123;&#125; testFunc(0, *tempList) //(0,1,2,3) &#123;&#125; testFunc(0, **tempDict) //(0,) &#123;'s':3,'m':4,'c':5&#125; testFunc(*tempTuple) //(2, 3, 4) &#123;&#125; testFunc(*tempDict) //('s', 'm', 'c') &#123;&#125; testFunc(**tempDict) // () &#123;'s': 3, 'm': 4, 'c': 5&#125; #__: assign something while unpacking, but will not need the variablefilename='foobar.txt'basename,__,ext=filename.rpartition('.') Underscore in PythonSource: https://shahriar.svbtle.com/underscores-in-python These are special method names used by Python. A way for the python system to use names that won’t conflict with user-defined names. DecoratorSource: http://thecodeship.com/patterns/guide-to-python-function-decorators/ Functions can be passed as parameters to other functions(decorator). decorators dynamically alter the functionality of a function, method or class without having to directly use subclasses. The name of the decorator should be perpended with an @symbol. 123456789101112131415161718192021222324252627282930313233#Example 1def get_text(name): return \"lorem ipsum, &#123;0&#125; dolor sit amet\".format(name) def p_decorate(func): def func_wrapper(name): return \"&lt;p&gt;&#123;0&#125;&lt;/p&gt;\".format(func(name)) return func_wrapper my_get_text = p_decorate(get_text) print my_get_text(\"John\") # Outputs lorem ipsum, John dolor sit amet # Equal@p_decorator def get_text(name): return \"lorem ipsum, &#123;0&#125; dolor sit amet\".format(name) print get_text('John') #Example 2def log(text): def decorator(func): def wrapper(*args, **kw): print '%s %s():' % (text, func.__name__) return func(*args, **kw) return wrapper return decorator @log('execute') def now(): print '2013-12-25' #now = log('execute')(now) &gt;&gt;&gt; now() execute now(): 2013-12-25 #now.__name__ is wrapper Assert StatementAssert condition, which is telling the program to test the condition, and trigger an error I the condition is false. Roughly, is equivalent to : 1234If not condition: trueRaise AssertionError() assert 2 + 2 == 5, \"Houston we've got a problem\" //in python 3 should work Namespace Toolsdir(object) returns a list of attributes that are accessible via the object, globals() return a dictionary of the attributes in the gloabl namespce, and locals() returns a dictionary of the attributes in the local namespce. eval()Source: https://stackoverflow.com/questions/9383740/what-does-pythons-eval-do The eval function lets a python program run python code within itself. Which inteprets a string as code. Usage: eval(expression, globals= None, locals=None), the globals are used for global variables, and locals are used for local variables. Convert data types Int(x [,base]) X to Integer Long(x [,base]) X to long Float(x) X to float Complex(real [,imag]) Create a complex number Str(x) X to string/ wrote for users Repr(x) prints official representation of a object, create for debugging. Eval(str) return a object, eval() inteprets a string as code Tuple(s) S to tuple List(s) S to list Chr(x) X to Character Unichr(x) X to Unicode character Ord(x) X to 整数值 Hex(x) X to 16进制 Oct(x) X to 8进制 How to copy in pythoncopy.copy: copy parent elements copy.deepcopy: deep copy, copy parent and child elements 123456789101112import copy tempList = [0,1,2,[3,4]] testList = tempList testCopyList = copy.copy(tempList) testDeepCopyList = copy.deepcopy(testList) tempList.append('sign') print (testList, testCopyList, testDeepCopyList) testList[3].append('sign') print (testList, testCopyList, testDeepCopyList) #============= RESTART: C:/Users/liran/Documents/trydecorator.py ============= [0, 1, 2, [3, 4], 'sign'] [0, 1, 2, [3, 4]] [0, 1, 2, [3, 4]] [0, 1, 2, [3, 4, 'sign'], 'sign'] [0, 1, 2, [3, 4, 'sign']] [0, 1, 2, [3, 4]] __new__, __ init__, _name_Source: http://spyhce.com/blog/understanding-new-and-init ) __new__ has to create the instance first, so __init__ can initialize it. In python 3 there inherit directly from ‘Object’, and Note that __init__ takes self as parameter. Use __init__ when you need to control initialization of a new instance, for initializing. __init__ doesn’t return anything, it’s only responsible for initializing the instance after it’s been created __new__ is called automatically when calling the class name. __init__ is called every time an instance of the class is returned by __new__ passing the returned instance to __init__ as the ‘self’ parameter. __new__ is the first step of instance creation. It’s called first, and is responsible for returning a new instance of your class. _name_(singl_leading_underscore)：private name , _name_: to avoid conflicts of attribute names between classes. If you write method named “method” in a class, the name will be mangled in “_ClassName__method” form. 12345678910111213141516171819202122232425262728#Example 1class Book(object): # object is parent class def __new__(cls, title): print '__new__' return super(Book, cls).__new__(cls) #get parent class __new__() method def __init__(self, title): print '__init__' super(Book, self).__init__(self) self.title = title b = Book('The Django Book') print b.title //Output: __new__ __init__ The Django Book # Example 2class A(object): def __new__(cls): print \"A.__new__ called\" def __init__(self): print \"A.__init__ called\" # -&gt; is actually never called, since we don't return anything from the constructor. print A() //Output: A.__new__ called None # Example 3 12345678910111213141516# nameclass Test(object): def __init__(self): self.__a = 'a' self._b = 'b' &gt;&gt;&gt; t = Test() &gt;&gt;&gt; t._b 'b' t._b is accessible because it is only hidden by convention &gt;&gt;&gt; t.__a Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;o AttributeError: 'Test' object has no attribute '__a' t.__a isn't found because it no longer exists due to namemangling &gt;&gt;&gt; t._Test__a 'a' What is [if name ==”main“ ] means?If statement is not required and “if” will end with column, and __name__ is module’s name. you also can use “ __name__ == ModuleName” for debugging. 123456789101112131415from const import PI def calc_round_area(radius): truereturn PI * (radius ** 2) def main(): trueprint \"round area: \", calc_round_area(2) main() # PI: 3.14 #round area: 12.56 # EqualPI = 3.14 def main(): trueprint \"PI:\", PI if __name__ == \"__main__\": main() #round area: 12.56 SuperSource: http://www.cnblogs.com/lovemo1314/archive/2011/05/03/2035005.html / https://www.blog.pythonlibrary.org/2014/01/21/python-201-what-is-super/) In cases where you have multiple inheritance, the super() helps to ensure that the proper method resolution order (MRO) is followed when moving up the inheritance tree. It is a shortcut to allow you to access the base class of a derived class, without having to know the base class name. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# Example 1Class A: def __init__(self): print( \"enter A\") print( \"leave A\") class B(A): def __init__(self): print( \"enter B\") A.__init__(self) print (\"leave B\") # equal class A(object): # A must be new-style class def __init__(self): print( \"enter A\") print( \"leave A\") class B(A): # A --&gt; C def __init__(self): print( \"enter B\") super(B, self).__init__() #super(B, self) is A.__init__() print (\"leave B\") # Example 2class Root(object): def __init__(self): print(\"this is Root\") class B(Root): def __init__(self): print(\"enter B\") # print(self) # this will print &lt;__main__.D object at 0x...&gt; super(B, self).__init__() print(\"leave B\") class C(Root): def __init__(self): print(\"enter C\") super(C, self).__init__() print(\"leave C\") class D(B, C): pass d = D() print(d.__class__.__mro__) #output: enter B enter C this is Root leave C leave B (&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.Root'&gt;, &lt;type 'object'&gt;) nonlocal in PythonAllows you to assign to variables in an outer, but non-global, scope. Which is very similar to global, but the former is used for variables in outer function scopes, and the latter is used for variables in the global scope. 1234567891011121314151617181920212223242526272829303132333435# Example 1: def outside(): msg = \"Outside!\" def inside(): msg = \"Inside!\" print(msg) inside() print(msg) &gt;&gt;&gt; outside() Inside! Outside! # Example 2: &gt;&gt;&gt; def outside(): msg = \"Outside!\" def inside(): nonlocal msg msg = \"Inside!\" print(msg) inside() print(msg) &gt;&gt;&gt; outside() Inside! Inside! # Example 3: &gt;&gt;&gt; def outside(): d = &#123;\"outside\": 1&#125; def inside(): d[\"inside\"] = 2 print(d) inside() print(d) &gt;&gt;&gt; outside() &#123;'inside': 2, 'outside': 1&#125; &#123;'inside': 2, 'outside': 1&#125; // d['inside']=2 is not an assignment, it is a method call. Which is equivalent to d.__setitem__('inside', 2) SelfSource: https://pythontips.com/2013/08/07/the-self-variable-in-python-explained/ Self is a reference to an object. It’s very close to the concept of this in many C-style language 12345678910111213141516171819202122232425class Foo(): i=3 def bar(self): \"\"\"The first argument of every class method, including __init__, is always a reference to the current instance of the class. By convention, this argument is always named self \"\"\" print ('Foo.i is',Foo.i) print ('self.i is',self.i) # output &gt;&gt;&gt; f=Foo() &gt;&gt;&gt; f &lt;__main__.Foo object at 0x00000038A3ECCB00&gt; &gt;&gt;&gt; f.bar &lt;bound method Foo.bar of &lt;__main__.Foo object at 0x00000038A3ECCB00&gt;&gt; &gt;&gt;&gt; f.bar() Foo.i is 3 self.i is 3 &gt;&gt;&gt; Foo.i 3 &gt;&gt;&gt; Foo.i = 4 &gt;&gt;&gt; f.bar() Foo.i is 4 self.i is 4 &gt;&gt;&gt; f.i = 5 &gt;&gt;&gt; f.bar() Foo.i is 4 self.i is 5 @Staticmethod, @Classmethod:Source: http://30daydo.com/article/89 They are methods that work without requiring an instance to be present. static method have no ‘self’ parameters. It localizes the function name in the classscope. When this method is called, we don’t pass an instance of the class to it (as we normally do with methods). This means you can put a function inside a class but you can’t access the instance of that class (this is useful when your method does not use the instance). Class method is in connection with inheritance and abstraction class. @classmethod means: when this method is called, we pass the class as the first argument instead of the instance of that class (as we normally do with methods). This means you can use the class and its properties inside that method rather than a particular instance. Abstraction class is ideal to avoid repetition. Abstract Base classes are classes that are only meant to be inherited from, you can not create instance of an ABC. Use @abstractmethod to realized it. 1234567891011121314151617181920212223242526#@classmethod exampleclass Data_test2(object): day=0 month=0 year=0 def __init__(self,year=0,month=0,day=0): self.day=day self.month=month self.year=year @classmethod def get_date(cls,string_date): #这里第一个参数是cls， 表示调用当前的类名 year,month,day=map(int,string_date.split('-')) date1=cls(year,month,day) #返回的是一个初始化后的类 return date1 def out_date(self): print \"year :\" print self.year print \"month :\" print self.month print \"day :\" print self.day PackageAny directory with an __init__.py file is considered a Python package. It is normal, even good practice, to leave an __init__.py empty when the package’s modules and subpackages do not need to share any code. Python Object-Oriented ProgrammingCustom classes in Python should be used to carefully isolate functions with context(is made up of any of the global variables) and side effect(changes that a function makes to its implicit context). Given a fixed input, the output will always be the same. Dynamic TypingIf something named “a” can be set to many different things, the developer or the maintainer must track this name in the code to make sure it has not been set to a unrelated object. Python does not have a final keyword, not like Java, that contains the same value after assignment. Documentation README file: root directory should give general information to both users and maintainers of a project. INSTALL file: the installation instructions are often reduced to one command LICENSE: file should always be present and specify the license TODO: the planned development for the code CHANGELOG: the changes in the code base for the latest versions __future__ import unicode_literalsYou are building a byte string that holds UTF-8 encoded bytes. print has to treat these two values differently; a byte string is written to sys.stdout unchanged. A unicode string is encoded to bytes first, and Python consults sys.stdout.encoding for that. If your system doesn’t correctly tell Python what codec it supports, the default is to use ASCII. 12345678# encoding: utf-8 from __future__ import unicode_literals name = 'helló wörld from example' print name.encode('utf8') # and you can reproduce the issue by creating unicode literals without the from __future__ import statement too: # encoding: utf-8 name = u'helló wörld from example' print name __init__ and __call__1234567891011class A: def __init__(self): print \"init\" truedef __call__(self): truetrueprint \"call\" &gt;&gt;&gt; A() init &gt;&gt;&gt; A()() init call Built-in Attributions:1234567891011121314151617181920__dict__ : 类的属性 __doc__: 类的文档字符串 __name__: 类名 __module__: 类定义所在的模块 __bases__: 类的所有父类元素 __init__(self, [,args …]) 构造函数(contructor) __del__ 删除一个对象 __repr__(self) 解释器的读取 __str__(self) printable __cmp__(self,x) 对象比较 __sub__: - __mul__: * __truediv__: / __floordiv__: // __gt__: greater than __ge__: greater equal __lt__: less than __le__: less equal __ne__: negative equal __eq__: method compares two objects and returns True if their values are the same, False otherwise. __str__, __repr____str__ make object readable, generate output for end user when they use print. __repr__ need code that reproduces object, generate output for developer. If you just use an object by itself name, then its __repr__ is called 1234567891011# Example one(what repr() looks like in python): def __repr__(self): return '&lt;&#123;0&#125;.&#123;1&#125; object at &#123;2&#125;&gt;'.format( self.__module__, type(self).__name__, hex(id(self))) # Example two: &gt;&gt;&gt; from decimal import Decimal &gt;&gt;&gt; a = Decimal(1.25) &gt;&gt;&gt; print(a) 1.25 #&lt;---- this is from __str__ &gt;&gt;&gt; a Decimal('1.25') #&lt;---- this is from __repr__ __add__, __radd__, __iadd__Source: http://www.marinamele.com/2014/04/modifying-add-method-of-python-class.html https://www.quora.com/How-can-I-overload-the-operator-in-Python __radd__is reverse add. When python use __add__ with x+y, it first attempts to x.__add__(y), if this fails then it falls back to y.__radd__(x), We can use +=operator in Python to overload, which can be translated to __iadd__() method. x+=y will try x.__iadd_(y) first, if it is not implemented, it tries x.\\_add__(y),and then try y.__radd__(x) Sum is start with the integer 0, and it try 0.__add__(var1), but var1.__radd__(0) will works 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# Example 1The += operator in the line o.x += 5 #is translated to o.x = o.x.__iadd__(5) #The attribute lookup on the right-hand side is translated to o.x = IAddProp.__get__(TestObj2.x, o, TestObj2).__iadd__(5) x+=y #will try x.__iadd__(y) first, if it is not implemented, it tries x.__add__(y),and then try y.__radd__(x) # Example 2class Day: def __init__(self, visits, contacts): self.visits = visits self.contacts = contacts def __str__(self): return \"Visits: %i, Contacts: %i\" % (self.visits, self.contacts) def __add__(self, other): total_visits = self.visits + other.visits total_contacts = self.contacts + other.contacts return Day(total_visits, total_contacts) def __radd__(self,other): if other == 0: return self else: return self.__add__(other) def __iadd__(self, other): visits = self.visits+other contacts = self.contacts + other print(visits, contacts) day1 = Day(10,1) day2 = Day(20,2) print(day1) print(day2) day3 = day1+day2 print(day3) repr(day3) sumday = sum([day1,day2,day3]) print(sumday) #Example 3In [24]: class A: def __radd__(self, other): return 10 def __add__(self, other): return 5 + otherIn [25]: a = A()In [26]: a + 2Out[26]: 7In [27]: 2 + aOut[27]: 10In [28]: a + aOut[28]: 10 “Is” , “==”== is for value equality, but is is for reference equality(memory address). But we often use == , because of the cpython implementations work, if the value is smaller than 256, is will give “True” output under is stuations for different entities: Why tuple, string are immutable: Mutable objects like list cannot be used as keys or set members in Python , not hashable If python only had mutable sequences, constructors which accepted sequences would often need to copy them to ensure that the sequences couldn’t be modified by other code. Built-in collections list 1234567891011list.append(elem) list.insert(index, elem) list.extend(list2) # Concatenate lists with \"extend()\" list.index(elem) list.remove(elem) Del list(range) list.sort() list.reverse() list.pop(index) List.extend(list2)// list+list2 List.count(item) string 12345678910s.lower(), s.upper() s.strip() s.isalpha(), s.isdigit(), s.isspace() s.startswith('other'), s.endswith('other') s.find('other') s.replace('old', 'new') s.split('delim') s.join(list) s.center(10)//' hello ' s.count(item) tuple 12345myTuple = (2,True,4.96) len(myTuple) #3 myTuple[0] #2 myTuple * 3 #(2, True, 4.96, 2, True, 4.96, 2, True, 4.96) myTuple[0:2] #(2, True) set 12345678Set1.union(set2) set1.insersection(set2) set1.difference(set2) Set1.issubset(set2) Set.add(element) Set.remove(element) Set.pop() Set.clear() dictionary Python dictionaries are implemented using hash tables. It is an array whose indexes are obtained using a hash function on the keys.The goal of a hash function is to distribute the keys evenly in the array. 1234567891011dict.clear() #Removes all elements of dictionary dict dict.copy() #Returns a shallow copy of dictionary dict //O(n) dict.fromkeys() #Create a new dictionary with keys from seq and values set to value. dict.get(key, default=None) #For key key, returns value or default if key not in dictionary//O(1) dict.has_key(key) #Returns true if key in dictionary dict, false otherwise//O(1) dict.items() #Returns a list of dict's (key, value) tuple pairs//O(1) dict.keys() #Returns list of dictionary dict's keys//O(1) dict.setdefault(key, default=None) #Similar to get(), but will set dict[key]=default if key is not already in dict dict.update(dict2) #Adds dictionary dict 2's key-values pairs to dict dict.values() #Returns list of dictionary dict's values//O(1) Del dictname[\"key\"] If the size of the array is 8, the index for ‘a’ will be: hash(‘a’) &amp; 7 = 0. The index for ‘b’ is 3, the index for ‘c’ is 2, the index for ‘z’ is 3 which is the same as ‘b’, here we have a collision. We could use a linked list to store the pairs having the same hash but it would increase the lookup time e.g. not O(1) average anymore. deque Both ends are accessible, but even looking at the middle is slow, and adding to or removing from the middle is slower still. Global operation, local operation Global operation: if you want to add one more element to array, you have to copy the original one and add new one at the end Local operation: if you want to add one more element to list, you just need to break the pointer and insert it. Try-Except to handle exceptions1234try: // to catch exception doSomething() except Exception: pass Get Attributions in A Function: 1234getattr(object, name[, default]) #Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y. hasattr(obj, name, /) #Return whether the object has an attribute with the given name. setattr(obj, name, value, /) #Sets the named attribute on the given object to the specified value. delattr(obj, name, /) #Deletes the named attribute from the given object. Understanding the underscore(_) of Python: The underscore(_) is special in Python, and is used for snake-case variables. When to use underscore(_) : For storing the value of last expression in interpreter. 10 Out[5]: 10 Out[7]: 10 3 Out[8]: 30 _20 Out[9]: 600 Ignoring the specific values # Ignore a value when unpacking x, , y = (1, 2, 3) # x = 1, y = 3 # Ignore the multiple values. It is called “Extended Unpacking” which is available in only Python 3.x x, *, y = (1, 2, 3, 4, 5) # x = 1, y = 5 # Ignore the index for _ in range(10): dosomething() # Ignore a value of specific location for , val in list_of_tuple: do_something() To give special meanings and functions to name of variables or functions _internal_name = ‘one_nodule’ # private variable _internal_version = ‘1.0’ # private variable class _Base: # private class _hidden_factor = 2 # private variable def init(self, price): self._price = price def _double_price(self): # private method return self._price * self._hidden_factor def get_double_price(self): return self._double_price() To use as ‘Internationalization(i18n)’ or ‘Localization(l10n)’ functions. # see official docs : https://docs.python.org/3/library/gettext.html import gettext gettext.bindtextdomain(‘myapplication’,’/path/to/my/language/directory’) gettext.textdomain(‘myapplication’) = gettext.gettext # … print((‘This is a translatable string.’)) To separate the digits of number literal value.separating digits of numbers using underscore for readability. dec_base = 1_000_000 bin_base = 0b_1111_0000 hex_base = 0x_1234_abcd print(dec_base) # 1000000 print(bin_base) # 240 print(hex_base) # 305441741 Primitive typesIt is an unit that cannot be divided any more. Like integer, double, float, Boolean, char, long … locates in a special place. chr(), unichr(), ord()123456&gt;&gt;&gt; chr(65) 'A' &gt;&gt;&gt; ord('a') 97 &gt;&gt;&gt; unichr(12345) u'\\u3039' Docstring, Block Comments the leading comment block is a programmer’s note the docstring(“”””) describes the operation of the function or class and will be shown in an interactive Python session when the user types help Logging Logging serves 2 purposes: diagnostic logging: recodes events related to the application’s operation audit logging: audit logging records for business analysis The difference between logging and print: the log record is created with logging event, contains readily available diagnostic inforation such as the filename, path, function, and the line number of the logging event print is a better option than logging is when the goal is to display help statement for a command-ine application. It is Strongly advised that you do not add any handlers other than NullHandler to your library’s loggers, which the user will have expressly turn off your logging if they don’t want to 12345678910# Example# set default logging handler to avoid \"No handler found\" warningimport loggingtry: from logging import NullHandlerexcept ImportError: class NullHander(logging.Handler): def emit(self, record): passlogging.getLogger(__name__).addHandler(NullHandler())","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"常用动词的同义词","slug":"02252018-1125","date":"2018-02-25T16:25:48.000Z","updated":"2018-02-25T16:28:45.960Z","comments":true,"path":"2018/02/25/02252018-1125/","link":"","permalink":"http://yoursite.com/2018/02/25/02252018-1125/","excerpt":"MAKE KIND Ask BRING CHOOSE AMAZING assemble affectionate beseech bear adopt astonishing blew amiable implore carry appoint astounding build amicable petition deliver cast bewildering concoct cordial propose fetch designate breathtaking construct friendly query gather elect dazzling create gracious question haul extract eye-opening devise humane request lug name jolting fabricate loving solicit tote nominate shocking forge mild summon transport pick startling invent softhearted urge usher select stunning prepare thoughtful move determine surprising outgoing","text":"MAKE KIND Ask BRING CHOOSE AMAZING assemble affectionate beseech bear adopt astonishing blew amiable implore carry appoint astounding build amicable petition deliver cast bewildering concoct cordial propose fetch designate breathtaking construct friendly query gather elect dazzling create gracious question haul extract eye-opening devise humane request lug name jolting fabricate loving solicit tote nominate shocking forge mild summon transport pick startling invent softhearted urge usher select stunning prepare thoughtful move determine surprising outgoing FIND GIVE IMPORTANT REALLY SEE THINK ascertain administer chief absolutely behold assume acquire allow critical actually detect deem detect award crucial certainly examine foresee discover bequeath essential extremely gape feel encounter bestow fundamental genuinely glimpse presume locate deliver meaningful honestly note realize obtain dispense momentous positively observe reckon pinpoint donate paramount precisely recognize sense procure entrust primary surely spot surmise spot grant significant truly view suspect unearth remit vital verily witness overriding YELL VERY MEAN bellow absolutely beastly call decidedly combative cry extremely contentious holler exceeding disagreeable howl genuinely discourteous scream highly grouchy shout particularly hostile shriek tremendously ornery squeal truly quarrelsome wail uncommonly vicious yelp veritably wicked","categories":[],"tags":[{"name":"Grammar","slug":"Grammar","permalink":"http://yoursite.com/tags/Grammar/"},{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"}]},{"title":"Structure of A Python Project","slug":"02242018-1110","date":"2018-02-25T04:10:43.000Z","updated":"2018-02-25T15:56:46.968Z","comments":true,"path":"2018/02/24/02242018-1110/","link":"","permalink":"http://yoursite.com/2018/02/24/02242018-1110/","excerpt":"structure of the repository Project name project description Bunch o’files Sample Respository12345678910111. README.rst2. LICENSE3. setup.py4. requirements.txt5. sample/__init__.py6. sample/core.py7. sample/helpers.py8. docs/conf.py9. docs/index.rst10.tests/test_basic.py11.tests/test_advanced.py","text":"structure of the repository Project name project description Bunch o’files Sample Respository12345678910111. README.rst2. LICENSE3. setup.py4. requirements.txt5. sample/__init__.py6. sample/core.py7. sample/helpers.py8. docs/conf.py9. docs/index.rst10.tests/test_basic.py11.tests/test_advanced.py 5-7: if you module consists of only one file, ./smple.py 2: check out choosealicense.com 3: some module package is at the root of your repository 4: specify the dependencies required to contribute to the project: testing, building, and generating documentation 8-9: package reference documentation 10-11: package integration and unit tests","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"The Zen of Python by Time Peters","slug":"02112018-1336","date":"2018-02-11T18:36:45.000Z","updated":"2018-02-25T04:31:08.550Z","comments":true,"path":"2018/02/11/02112018-1336/","link":"","permalink":"http://yoursite.com/2018/02/11/02112018-1336/","excerpt":"Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren’t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one– and preferably only one –obvious way to do it.Although that way may not be obvious at first unless you’re Dutch.Now is better than never.Although never is often better than right now.If the implementation is hard to explain, it’s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea – let’s do more of those!","text":"Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren’t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one– and preferably only one –obvious way to do it.Although that way may not be obvious at first unless you’re Dutch.Now is better than never.Although never is often better than right now.If the implementation is hard to explain, it’s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea – let’s do more of those! Reference:The Hitchhiker’s Guide to Python","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"给博客换模板 - From Jekyll To Hexo","slug":"02012018-2301","date":"2018-02-02T04:01:25.000Z","updated":"2018-02-25T15:53:15.688Z","comments":true,"path":"2018/02/01/02012018-2301/","link":"","permalink":"http://yoursite.com/2018/02/01/02012018-2301/","excerpt":"契机使用Jekyll模板已经两年了，期间修修改改，已经完全看不出其中的结构，完全不想再碰。正好看中了更顺眼的Hexo Theme，干脆来个一次性大换血，也顺便整理一下这几年来的总结。 Jekyll已经乱成了这样，大量的文件被放在总目录下，杂乱无章： builderqing.github.io-directory-tree/ ├── ._config.yml ├── _data ├── _includes ├── _layouts ├── _sass ├── _templates ├── dataset ├── gallery ├── image └── project","text":"契机使用Jekyll模板已经两年了，期间修修改改，已经完全看不出其中的结构，完全不想再碰。正好看中了更顺眼的Hexo Theme，干脆来个一次性大换血，也顺便整理一下这几年来的总结。 Jekyll已经乱成了这样，大量的文件被放在总目录下，杂乱无章： builderqing.github.io-directory-tree/ ├── ._config.yml ├── _data ├── _includes ├── _layouts ├── _sass ├── _templates ├── dataset ├── gallery ├── image └── project 新建的Hexo使用了hiker theme，好看又好用： builderqing.github.io-directory-tree/ ├── ._config.yml ├── public ├── scaffolds ├── source └── themes 如何解决代码块中出现垂直代码块(vertical scroll bar)的方法模板中如果使用 ``` 来引用code块， 有点不好看。 我需要代码块不仅能高亮部分代码， 还能使用水平滚动条。 在default code选项中， 不仅会出现水平滚动条，也会出现垂直滚动条。 其中一个方法是改变css文件， 步骤如下： 打开文件themes/hiker/source/css/_partial/highlight.styl 找到代码块，并做以下的修改 使用``` 来高亮代码块 1234567891011121314$code-block background: $highlight-background margin: article-padding article-padding * 0 padding: 15px article-padding border-style: solid border-color: color-border border-width: 1px 0 /*change*/ overflow: auto overflow-y: hidden; /*end change*/ color: $highlight-foreground font-size: 0.9em; line-height: 1em 如何在首页显示READMORE在写markdown的过程中，把想要显示的内容文本后加入以下代码， 剩下的就会被隐藏，只显示readmore 12345show text &lt;!--more--&gt;other hidden text","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Jekyll","slug":"Jekyll","permalink":"http://yoursite.com/tags/Jekyll/"}]},{"title":"Basic SQL and Advanced SQL Notes","slug":"02052018-1745","date":"2017-01-02T20:00:00.000Z","updated":"2018-02-25T15:43:19.443Z","comments":true,"path":"2017/01/02/02052018-1745/","link":"","permalink":"http://yoursite.com/2017/01/02/02052018-1745/","excerpt":"SQL SyntaxDATABASE: Database is a collection of data stored in some organized fashion.DATABASE MANAGEMENT SYSTEM(DBMS): Database software, we manipulate data via DBMS.TABLE: Table is a structured file that store data for a specific type. The table name is always unique - meaning no other table in that database can have the same name.SCHEMA: Information about database and table layout and properties.COLUMN: Tables are made up of columns. Each column in a database has an associated data type.DATA TYPE: a type of allowed data. Data types restrict the type of data that can be stored in a column.ROW: Data in a table is stored in rows.PRIMARY KEY: A column(or columns) whose values uniquely identify every row in a table. No null values","text":"SQL SyntaxDATABASE: Database is a collection of data stored in some organized fashion.DATABASE MANAGEMENT SYSTEM(DBMS): Database software, we manipulate data via DBMS.TABLE: Table is a structured file that store data for a specific type. The table name is always unique - meaning no other table in that database can have the same name.SCHEMA: Information about database and table layout and properties.COLUMN: Tables are made up of columns. Each column in a database has an associated data type.DATA TYPE: a type of allowed data. Data types restrict the type of data that can be stored in a column.ROW: Data in a table is stored in rows.PRIMARY KEY: A column(or columns) whose values uniquely identify every row in a table. No null values Select Rows How to use the SQL SELECT statement to retrieve a single table columns? Multiple SQL statements must be separated by semicolons SQL statements are case-insensitive, while the names of tables, columns and values are not. All extra white space within a SQL Statement is ignored when that statement is processed. 12345678910111213141516171819202122232425--select one column Select column_nameFrom Products;--Select multiple columns Select column_name1,column_name2,column_name3From Products;--Select all columns SELECT *FROM Products;--Select distinct rows SELECT DISTINCT column_nameFROM Products;--Select limit results SELECT column1,column2,...FROM table LIMIT offset , count;Select column_nameFrom ProductswhereLimit 5 offset 5; Order By Rows ORDER BY clause is the last clause in your SELECT statement. (put it at the end) ASC = Ascending order(default), DESC=Descending order Using FIELD() function to define your own custom sort order, not ASC or DESC 1234567891011121314151617181920212223242526272829303132--Sorting data Select column_nameFrom ProductsOrder by column_name--Sorting by multiple columns Select column_name1,column_name2,column_name3From ProductsOrder by column_name2,column_name3ORSelect column_name1,column_name2,column_name3From ProductsOrder by 2,3--Sorting different direction Select column_name1,column_name2,column_name3From ProductsOrder by 2 DESC, 3 ASC;--Sorting by custom order select orderNumber,statusFrom ordersorder by FIELD(status, 'In Process','On Hold','Cancelled','Resolved','Disputed','Shipped');SELECT CONCAT(prefix, suffix)FROM itemsORDER BY prefix, suffix; Search Rows If we want to extract subset of the table’s data as needed for specific operations or reports. WHERE is used not only with the SELECT but also DELETE and UPDATE 123456789101112131415161718192021222324252627282930313233--Select special items SELECT column_name1,column_name2 FROM ProductsWHERE column_name1 = number;--Check for no value SELECT column_name FROM CustomersWHERE column _name IS NULL;------= : Equal &lt;&gt; : Not equal. Note: In some versions of SQL this operator may be written as != &gt; : Greater than &lt; : Less than &gt;= : Greater than or equal &lt;= : Less than or equal BETWEEN : Between an inclusive range (range) SELECT * FROM employee_tbl WHERE daily_typing_pages BETWEEN 170 AND 300; LIKE : Search for a pattern LIKE '%$_20%' ESCAPE '$'--orLIKE '%\\$_20%' TO escape characterIN : To specify multiple possible values for a column SELECT firstname, city, stateFROM customersWHERE state IN ('Arizona', 'Washington', 'Oklahoma', 'Colorado', 'Hawaii');IS NULL: To test whether a value is NULL or not Boolean Operation If we want to extract subset of the table’s data as needed for specific operations or reports. The single quotes are used to delimit a string. The IN operator is the same as OR IN takes a comma-delimited list of valid values, all enclosed within parentheses 12345678910111213141516171819202122232425262728293031--Using the AND(RANK HIGHER) SELECT column_name1,column_name2FROM ProductsWHERE column_name1 = number1 AND column_name2 = number2;--Using the OR SELECT column_name1,column_name2FROM ProductsWHERE column_name1 = number1 OR column_name2 = number2;--Using the IN --Far cleaner and easier to read --Easier to manage --Can contain another SELECTSELECT column_name1,column_name2FROM ProductsWHERE column_name1 IN (val1,val2) --Using the NOT --Used before the column to filter on SELECT column_name1,column_name2FROM ProductsWHERE column_name1 NOT IN (val1,val2)--Using the Exist SELECT employeenumber, firstname, lastname, extensionFROM employeesWHERE exists(SELECT 1FROM officesWHERE city = 'San Francisco' and offices.officeCode = employees.officeCode); Like and Wildcard Rows How to create search pattern to compare against your data? % represents zero, one, or more characters at the specified location in the search pattern. don’t overuse wildcats for processing takes long time 12345678910111213141516171819202122232425262728293031323334--Percent sign(%) --Match any number of occurrences of any character--accept any characters after the word 'Fish'SELECT column_nameFROM ProductsWHERE column_nameLIKE 'Fish%'--accept any characters before or after the word 'Fish'SELECT column_nameFROM ProductsWHERE column_nameLIKE '%Fish%' --accept any products that begin with F and end with a iSELECT column_nameFROM ProductsWHERE column_nameLIKE 'F%i' --Underscore(_) --a single character matchingSELECT column_nameFROM CustomersWHERE column _name LIKE '_ inch'--Brackets([])--specify a set of characters --start with J or MSELECT column_nameFROM CustomersWHERE column_name LIKE '[JM]%'ORDER BY column_name Aliases and Concat columns Aliases can be used when you create a calculated field, renaming a column if the real table column name contains illegal characters, or changing the ambiguous name. 123456789101112131415161718192021--Concatenate --Joining values together to form a single long value. Join column and column SELECT concat(vend_name, ' (' , vend_country ,')')FROM VendorsORDER BY vend_name;--Trim the padding space --RTRIM() trims all space from the right of a value--LTRIM() trim all the left side of a string--TRIM() trims both the right and left--AliasSELECT column_name AS aliasesFROM CustomersWHERE column_name IS NULL;--SQL Mathematical operators + ：addition- ： Subtraction* ： Multiplication/ ：Division Mathematic Functions Very few functions are supported identically by all major DBMSs. We can functions in other parts of the SELECT statement, as well as in other SQL statements. More Text Manipulation detailsMore Numerical Manipulation details 1234567891011121314--Text manipulation functions --convert text to upper caseSELECT column_name1, UPPER(column_name2)--SOUNDEX takes into account similar sounding characters and syllables, enabling strings to be compared by how they sound rather than how they have been typed.SELECT column_name1,column_name2FROM CustomersWHERE SOUNDEX(column_name1) = soundex('name')--Date and time manipulation functions --in MySQL and MariaDB Numeric manipulation functions SELECT order_numFROM OrdersWHERE year(order_date) = 2012 Aggregate Functions These functions enable you to perform all the types of retrieval just enumerated All ignore NULL values More Aggregate details Group By and Having You can perform aggregate calculations on each group. GROUP BY clause must come after any WHERE clause and before any ORDER BY clause WHERE filters rows and HAVING filters groups. 123456789101112131415161718SELECT c1, c2,..., cn, aggregate_function(ci)FROM tableWHERE where_conditionsGROUP BY c1 , c2,...,cn;--HAVING &amp; WHERE --HAVING is very similar to WHERE. The only difference is that WHERE filters rows and HAVING filters groups.SELECT vend_id, COUNT(*) AS num_prodsFROM ProductsWHERE prod_price &gt;= 4GROUP BY vend_idHAVING COUNT(*) &gt;= 2;--ORDER BY &amp; GROUP BY --As a rule, anytime you use a GROUP BY clause, you should also specify an ORDER --BY clause. That is the only way to ensure that data will be sorted properly. Never rely --on GROUP BY to sort your data. Subqueries Subqueries are queries that are embedded into other queries. Subqueries is nested inside another query such as SELECT, INSERT, UPDATE, DELETE. 1234567--Subqueries SELECT cust_name, cust_state,(SELECT COUNT(*)FROM OrdersWHERE Orders.cust_id = Customers.cust_id) AS ordersFROM CustomersORDER BY cust_name; Join If we want to retrieve data in multiple tables with a single SELECT statement, Use JOIN A well-designed database or application is said to scale well. JOIN clause is not a physical entity, and is created by the DBMS as needed. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253--Creating a join --inner joinSELECT vend_name, prod_name, prod_priceFROM Vendors,ProductsWHERE Vendors.vend_id = Products.vend_id --Cartesian product The results returned by a table relationship without a join condition. --The number of rows retrieved will be the number of rows in the first table multiplied by --the number of rows in the second table. Sometimes you’ll hear the type of join that --returns a Cartesian Product referred to as a cross join.--inner joinSELECT column_name(s) FROM table1INNER JOIN table2ON table1.column_name=table2.column_name;--or SELECT column_name(s)FROM table1JOIN table2ON table1.column_name=table2.column_name;--left joinSELECT column_name(s) FROM table1LEFT JOIN table2ON table1.column_name=table2.column_name;--orSELECT column_name(s)FROM table1LEFT OUTER JOIN table2ON table1.column_name=table2.column_name;--right joinSELECT column_name(s) FROM table1RIGHT JOIN table2ON table1.column_name=table2.column_name;--orSELECT column_name(s)FROM table1RIGHT OUTER JOIN table2ON table1.column_name=table2.column_name;--full outer join--NOT SUPPORT IN MYSQL --self joinSELECT a.column_name, b.column_name... FROM table1 a, table1 bWHERE a.common_field = b.common_field;--cross joinSELECT *FROM T1CROSS JOIN T2; Union or Intersect The combined queries are usually known as unions or compound queries. The INTERSECT operator is a set operator that returns only distinct rows of two queries. 123456789101112131415161718192021222324252627282930--Using UNION SELECT cust_name, cust_contact, cust_emailFROM CustomersWHERE cust_state IN ('IL','IN','MI')UNIONSELECT cust_name, cust_contact, cust_emailFROM CustomersWHERE CUST_NAME = 'fUN4All';--Equal to SELECT cust_name, cust_contact, cust_emailFROM CustomersWHERE cust_state IN ('IL','IN','MI') OR CUST_NAME = 'fUN4All';--Using UNION ALL --Don't eliminate duplicates SELECT City FROM CustomersUNION ALLSELECT City FROM SuppliersORDER BY City;--Using Intersect --The order and the number of columns must be the same.--The data types of the corresponding columns must be compatible.--Intersect = DISTINCT + INNER JOIN--INTERSECT=DISTINCT + IN(SELECT column_list FROM table_1)INTERSECT(SELECT column_listFROM table_2); Insert or Update or Delete Rows12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364--Inserting a single complete row insert into \"tablename\"INSERT INTO \"tablename\" (first_column,...last_column)VALUES (first_value,...last_value);--Inserting a single partial row INSERT INTO Customers (CustomerName, City, Country)VALUES ('Cardinal', 'Stavanger', 'Norway');--Insert + Select SELECT *FROM tasks;CREATE TABLE tasks_1 like tasks;INSERT INTO tasks_1SELECT *FROM tasks;--Update a column UPDATE [LOW_PRIORITY] [IGNORE] table_name SET column_name1 = expr1, column_name2 = expr2, ...WHERE condition;--Using UPDATE with INNER JOIN|LEFT JOIN UPDATE employeesLEFT JOINmerits ON employees.performance = merits.performance SET salary = salary + salary * 0.015WHEREmerits.percentage IS NULL;--Delete a row DELETE FROM table [WHERE conditions] [ORDER BY ...] [LIMIT rows] DELETE FROM \"tablename\"WHERE \"columnname\" OPERATOR \"value\" [and|or \"column\" OPERATOR \"value\"];--Delete data from multiple tables DELETE FROM table_1, table_2,...USING table-refs[WHERE conditions] --Using DELETE with INNER JOIN|LEFT JOIN, just change employees. --you can delete records associated with officeCode 5 from both offices and employees tablesDELETE offices, employees FROM officesINNER JOIN employees ON employees.officeCode = employees.officeCodeWHERE offices.officeCode = 5//Now, DELETE T1FROM T1 LEFT JOIN T2 ON T1.key = T2.key WHERE T2.key IS NULL Alter or Create or Drop Table123456789101112131415161718192021222324252627282930313233343536CREATE TABLE tableName [LIKE] anothertableName CREATE TABLE customers_archive LIKE customers;--orINSERT INTO customers_archiveSELECT * FROM customers--Drop a table--The drop table command is used to delete a table and all rows in the table. drop table \"tablename\"--DELETE &amp; DROP--Deleting all of the records in the table leaves the table including column and constraint information. --Dropping the table removes the table definition as well as all of its rows.--Alter--Alter is very useful when you want to change a name of your table, any table field or if you want to add or --delete an existing column in table ALTER TABLE testalter_tbl DROP i;ALTER TABLE testalter_tbl ADD i INT FIRST;ALTER TABLE testalter_tbl MODIFY c CHAR(10);ALTER TABLE table_nameCHANGE old_column_name new_column_name new_column_definition;ALTER TABLE table_nameADD COLUMN columnName type AFTER othercolumnNameALTER TABLE table_nameADD FOREIGN KEY columnName REFERENCES table(columnName)ALTER TABLE table_nameDROP CONSTRAINT constraint_name;ALTER TABLE table_nameDROP FOREIGN KEY column_nameALTER TABLE tableNameADD PRIMARY KEY(columnName) Create Constraints for Table An index can be created in a table to find data more quickly and efficiently. Efficiently checking in a middle size 123--Create constraint 1 CREATE UNIQUE INDEX index_nameON table_name (column_name) Truncate TableIt perform the same function as a DELETE without a WHEREIf you are using InnoDB tables, MySQL will check if there are any foreign key constraints available in the tables before deleting data. The following are cases: If the table has any foreign key constraints, the TRUNCATE TABLE statement deletes rows one by one. If the foreign key constraint has DELETE CASCADE action, the corresponding rows in the child tables are also deleted. If the foreign key constraint does not specify the DELETE CASCADE action, the TRUNCATE TABLE deletes rows one by one, and it will stop and issue an error when it encounters a row that is referenced by a row in a child table. If the table does not have any foreign key constraint, the TRUNCATE TABLEstatement drops the table and recreates a new empty one with the same structure, which is faster and more efficient than using the DELETE statement especially for big tables. If you are using other storage engines, the TRUNCATE TABLE statement just drops and recreates a new table.Notice that the TRUNCATE TABLE statement resets auto increment value to zero if the table has an AUTO_INCREMENT column. In addition, the TRUNCATE TABLE statement does not use the DELETE statement, therefore, the DELETE triggers associated with the table will not be invoked. 12345678910--Truncate table TRUNCATE TABLE [database_name.] [schema_name.] table_name [ WITH ( PARTITIONS ( partition_number | partition_number TO partition_number ) ] --TRUNCATE &amp; DELETE--The difference between this two is that DELETE can roll back if you choose, but TRUNCATE will notTRUNCATE TABLE tableName;--orDELETE FROM tableName; Replace Table If the new row already exist, the REPLACE statement deletes the old row first and then inserts a new row. In some cases, the REPLACE statement updates the existing row only. The Replace statement first inserts the new row into the cities table with the information provided by the column list. The insertion fails because the row with id 2 already exists in the cities table, therefore, MySQL raises a duplicate-key error. The Replace statement then updates the row that has the key specified in the value of the id column. In the normal process, it would delete the old row with conflict id first and then inserts a new row. 123456789101112131415161718REPLACE INTO cities(id,population)VALUES(2,3696820);REPLACE INTO table_name(column_list)VALUES(value_list);INSERT INTO table_name(column_list)VALUES(value_list);--replace and updateREPLACE INTO tableSET columnREPLACE INTO cititesSET id = 4, name = 'Phoenix', population = 1768980;--raise errorUPDATE cititesSET id = 4, name = 'Phoenix', population = 1768980; ADVANCE SQL – unfinishedADVANCE - MySQL TransactionsProperties of Transactions Atomicity: ensure all operations within the work unit are completed. Consistency: ensure the database properly changes states Isolation: ensure transactions to operate independently and transparent to each other Durability: ensure the result persists in case of a system failure commit and rollback (for different databases): Commit command should be issued if the transaction is completed(need commit to update) If a failure occurs, a rollback command should be issued to return in the transaction to its previous state.(if any operation within the transaction fails, the entire transaction will fail. For atomicity) There are some statements cannot use within a transaction. 123456CREATE / ALTER / DROP DATABASECREATE / ALTER / DROP / RENAME / TRUNCATE TABLECREATE / DROP INDEXCREATE / DROP EVENTCREATE / DROP FUNCTIONCREATE / DROP PROCEDURE ADVANCE - Prepared Statement make your queries execute faster and more secure. PREPARE-&gt;EXECUTE-&gt;DEALLOCATE PREPARE Use the prepare statement to prepare a statement for execution. Question mark is a placeholder for the productCode. #prepared statement http://www.mysqltutorial.org/mysql-prepared-statement.aspx Declare a produceCode variable and set it values to ‘S10_1678’ Use DEALLOCATE PREPARE to release PREPARE statement. 123456PREPARE stmt1 from 'SELECT productCode, productNameFROM productsWHERE productCode=?';SET @pc='S10_1678';EXECUTE stmt1 USING @pc;DEALLOCATE PREPARE stmt1; ADVANCE - triggersA set of SQL statements stored in the database catalog. And is executed whenever an event associated with a table occurs. (a special type of stored procedure). The main difference between a trigger and a stored procedure is that a trigger is called automatically when a data modification event is made whereas a store procedure must be called explicitly.Advantages • SQL triggers provide an alternative way to check the integrity of data. • SQL triggers can catch errors in business logic in the database layer. • SQL triggers provide an alternative way to run scheduled tasks. By using SQL triggers, you don’t have to wait to run the scheduled tasks because the triggers are invoked automatically before or after a change is made to the data in the tables. • SQL triggers are very useful to audit the changes of data in tables.Disadvantages • SQL triggers only can provide an extended validation and they cannot replace all the validations. Some simple validations have to be done in the application layer. For example, you can validate user’s inputs in the client side by using JavaScript or in the server side using server-side scripting languages such as JSP, PHP, ASP.NET, Perl, etc. • SQL triggers are invoked and executed invisible from the client applications, therefore, it is difficult to figure out what happen in the database layer. • SQL triggers may increase the overhead of the database server. Important words in SQL triggers:BEFORE INSERT – activated before data is inserted into the table.AFTER INSERT – activated after data is inserted into the table.BEFORE UPDATE – activated before data in the table is updated.AFTER UPDATE – activated after data in the table is updated.BEFORE DELETE – activated before data is removed from the table.AFTER DELETE – activated after data is removed from the table. Triggers storage:MySQL stores triggers in a data directory e.g., /data/classicmodels/ with the files named tablename.TRG and triggername.TRN :The tablename.TRG file maps the trigger to the corresponding table.the triggername.TRN file contains the trigger definition.LIMITATIONS(CANNOT DO):• Use SHOW, LOAD DATA, LOAD TABLE, BACKUP DATABASE, RESTORE, FLUSH and RETURN statements.• Use statements that commit or rollback implicitly or explicitly such as COMMIT , ROLLBACK , START TRANSACTION , LOCK/UNLOCK TABLES , ALTER , CREATE , DROP , RENAME , etc.• Use prepared statements such as PREPARE, EXECUTE, etc.• Use dynamic SQL statements. Syntax:CREATE TRIGGER trigger_nametrigger_time trigger_eventON table_nameFOR EACH ROWBEGIN…END;Drop triggers:DROP TIGGER table_name.trigger_name; Views table like Excel, It is a logic table, which contains no value but have table structure, you can query data against it.​ Database system stores database views as a SQL SELECT statement with joins. When the data of the tables changes, the view reflects that changes. View is in SHOW TABLES results. Use SHOW FULL TABLE Advantages Syntax: ALLOW you to simplify complex queries. You can hide complexity of underlying tables to the end-users CREATE Helps limit data access to specific users. To expose non-sensitive data to specific group of users. [ALGORITHM = {MERGE | TEMPTABLE | UNDEFINED}] Provides extra security layer. Can create read-only view VIEW [database_name].[view_name] Enables computed columns AS Enable backward compatibility. [SELECT statement] Disadvantages Querying data from a database view can be slow, especially the view is created based on other views Tables dependency: you create a view based on underlying tables Stored Procedures tableA stored procedure can be invoked by triggers.Major Diff: A Function can be used in the SQL Queries while a procedure cannot be used in SQL queries Advantages• Increase the performance of the applications. Stored procedures are compiled and stored in the database. If an application uses a stored procedure multiple times in a single connection, the compiled version is used, or the stored procedure works like a query.• Help reduce the traffic between application and database server.• Can reusable and transparent to any application.• Are secure. The database administrator can grant appropriate permissions to applications that access stored procedures Disadvantages• If you use a lot of stored procedures, the memory usage of every connection will increase substantially• constructs of stored procedures make it more difficult to develop stored procedures• Difficult to debug stored procedures• Not easy to develop and maintain stored procedures. Examples:Create procedure – stored procedure delimiter // – not related to the sp syntax. change the ; to //, we avoid mysql tool interpret – at a time and pass the sp to the server as a whole. // at the end indicates the end – of the stored procedure. create procedure GetAllProducts() – name of procedure is GetAllProducts begin – begin and end is the body of the stored procedure select * from products; end// delimiter ;Call procedure CALL STORED_PROCEDURE_NAME();Declare variable DECLARE variable_name datatype(size) DEFAULT default_value;Parameters IN[DEFAULT]/ OUT/ INOUT DEFINE A PARAMETER: MODE param_name param_type(param_size) Some Important MySQL FunctionSource:FIELDCAST like str()/int(): convert a value of any type into a value(BINARY, CHAR, DATE, DATETIME, TIME, DECIMAL, SIGNED, UNSIGNED)IFNULL() : IFNULL(expression_1,expression_2); The IFNULL function returns expression_1 if expression_1 is not NULL ; otherwise, it returns expression_2.RAND():generates a random value for each row in the table.select *from employeeswhere jobtitle = ‘Sales Rep’ORDER BY RAND()LIMIT 1;NOW()/ CURDATE()/CURTIME()DATE_ADD(date, interval number type)GROUP_CONCAT():If you do not specify a separator, the GROUP_CONCAT function uses a comma (,) as the default separator.SELECT GROUP_CONCAT(DISTINCT v ORDER BY v ASC SEPARATOR ‘;’)FROM t;SELECT user();SELECT SESSION_USER();SELECT system_user();SELECT VERSION(); References: SQL Practice Problems Sams Teach Yourself SQL in 10 Minutes","categories":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"}]},{"title":"Robust and Optimal Stochastic Resource Allocation on Transportation Networks Subject to Disruptive Events","slug":"03012016-1651","date":"2016-03-01T21:51:37.000Z","updated":"2018-02-25T04:31:16.959Z","comments":true,"path":"2016/03/01/03012016-1651/","link":"","permalink":"http://yoursite.com/2016/03/01/03012016-1651/","excerpt":"The models I built for solving resource allocation problem on transportation networks. Different size of directed graphs have been considered, and comparison between models have been made. Python Gurobi is used to realize the optimization process. Resource allocation is the assignment of available resources to various uses, which is closely related to the network interdiction problem depends on our objects. The network interdiction problem ask to find a special number of edges whose removal from the network minimizes the maximum flow. Various examples could be found in areas such as military planning, hospital infection control or poison food interdiction. Our goals in such examples are the same: to determine the worst-case scenario, after the realization of uncertainty.","text":"The models I built for solving resource allocation problem on transportation networks. Different size of directed graphs have been considered, and comparison between models have been made. Python Gurobi is used to realize the optimization process. Resource allocation is the assignment of available resources to various uses, which is closely related to the network interdiction problem depends on our objects. The network interdiction problem ask to find a special number of edges whose removal from the network minimizes the maximum flow. Various examples could be found in areas such as military planning, hospital infection control or poison food interdiction. Our goals in such examples are the same: to determine the worst-case scenario, after the realization of uncertainty. contentf af afajkhdfjk Imagine that there are refineries that process several million barrels of crude oil every day, and pipelines are used to transport crude oil to consumption centers. There are intermediate pump stations in long distance networks to keep the crude oil moving smoothly. However, pump stations and pipelines may be out of service. Hence, it is important to manage the oil transportation system in such a way that it is capable of coping with such situations and to reduce the amount of storage of crude oil at consumption centers as much as possible. The bold red lines in the above graphs are the critical edges that determines the maximum flow, assuming the realization of uncertainty. QINGQINGJOURNAL ‘S ```","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Optimization","slug":"Optimization","permalink":"http://yoursite.com/tags/Optimization/"},{"name":"Maximum Flow","slug":"Maximum-Flow","permalink":"http://yoursite.com/tags/Maximum-Flow/"}]}]}